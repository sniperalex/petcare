
const storageKeys = { users: 'petcare_users', pets: 'petcare_pets', recipes: 'petcare_recipes', availability: 'petcare_availability', booked_consultations: 'petcare_booked_consultations', ids: 'petcare_ids', theme: 'theme', loggedInUser: 'petcare_logged_in_user_id', sidebarState: 'sidebar_state' };
const LG_BREAKPOINT = 992; const DEFAULT_PET_PHOTO_PATH = 'img/'; const DEFAULT_USER_PHOTO = { administrator: `${DEFAULT_PET_PHOTO_PATH}admin.jpeg`, veterinarian: `${DEFAULT_PET_PHOTO_PATH}vet.jpeg`, client: `${DEFAULT_PET_PHOTO_PATH}client.jpeg`, default: `${DEFAULT_PET_PHOTO_PATH}placeholder_user.png` }; const DEFAULT_PET_PHOTO = `${DEFAULT_PET_PHOTO_PATH}pet_placeholder.png`; const MAX_FILE_SIZE_MB = 2; const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

function loadFromLocalStorage(key) { const data = localStorage.getItem(key); try { if (key === storageKeys.ids) { const parsed = data ? JSON.parse(data) : {}; return { user: parsed.user || 0, pet: parsed.pet || 0, recipe: parsed.recipe || 0, availability: parsed.availability || 0, booked_consultation: parsed.booked_consultation || 0 }; } if ([storageKeys.users, storageKeys.pets, storageKeys.recipes, storageKeys.availability, storageKeys.booked_consultations].includes(key)) { const parsedData = data ? JSON.parse(data) : []; return Array.isArray(parsedData) ? parsedData.filter(item => item != null) : []; } return data ? JSON.parse(data) : null; } catch (e) { console.error(`Erro ao carregar ${key}:`, e); if (key === storageKeys.ids) return { user: 0, pet: 0, recipe: 0, availability: 0, booked_consultation: 0 }; if ([storageKeys.users, storageKeys.pets, storageKeys.recipes, storageKeys.availability, storageKeys.booked_consultations].includes(key)) return []; return null; } }
function saveToLocalStorage(key, data) { try { const dataToSave = Array.isArray(data) ? data.filter(item => item != null) : data; localStorage.setItem(key, JSON.stringify(dataToSave)); } catch (e) { console.error(`Erro ao salvar ${key}:`, e); const msgElId = document.getElementById('user-management-message') ? 'user-management-message' : (document.getElementById('consultations-message') ? 'consultations-message' : (document.getElementById('registerUserForm') ? 'form-message' : 'profile-message')); const msgEl = document.getElementById(msgElId); if (msgEl) showMessage(msgEl.id, `Erro: Limite de armazenamento local excedido ou outro erro ao salvar. Não foi possível completar a operação.`, 'danger', 0); throw e; } }
function loadIdCounters() { return loadFromLocalStorage(storageKeys.ids); }
function saveIdCounters(counters) { saveToLocalStorage(storageKeys.ids, counters); }
function generateUniqueId(type) { const c = loadIdCounters(); if (typeof c[type] === 'undefined' || isNaN(c[type])) { c[type] = 0; } c[type]++; saveIdCounters(c); return c[type]; }

function initializeSampleData() { let users = loadFromLocalStorage(storageKeys.users); if (users.length === 0) { console.log("Inicializando dados de exemplo v1.37..."); const counters = { user: 0, pet: 0, recipe: 0, availability: 0, booked_consultation: 0 }; saveIdCounters(counters); const adminId = generateUniqueId('user'); const clientId1 = generateUniqueId('user'); const clientId2 = generateUniqueId('user'); const vetIds = []; const vetEmails = ['vet@example.com', 'vet2@example.com', 'dr.ana@example.com', 'dr.paulo@example.com']; let vet1Id = null; users = [{ id: adminId, name: 'Administrador', email: 'admin@example.com', password: 'password', profile: 'administrator', photoUrl: null }, { id: clientId1, name: 'Cliente Feliz', email: 'client@example.com', password: 'password', profile: 'client', photoUrl: null }, { id: clientId2, name: 'Segundo Cliente', email: 'client2@example.com', password: 'password', profile: 'client', photoUrl: null },]; vetEmails.forEach(email => { const vetId = generateUniqueId('user'); vetIds.push(vetId); if (email === 'vet@example.com') vet1Id = vetId; let vetName = 'Dr(a). Veterinario Padrao'; if (email === 'dr.ana@example.com') vetName = 'Dra. Ana Silva'; if (email === 'dr.paulo@example.com') vetName = 'Dr. Paulo Souza'; if (email === 'vet2@example.com') vetName = 'Dr(a). Vet Dois'; users.push({ id: vetId, name: vetName, email: email, password: 'password', profile: 'veterinarian', photoUrl: null }); }); try { saveToLocalStorage(storageKeys.users, users); saveToLocalStorage(storageKeys.recipes, []); saveToLocalStorage(storageKeys.booked_consultations, []); const samplePets = [{ id: generateUniqueId('pet'), ownerId: clientId1, name: 'Bolinha', species: 'Cão', breed: 'SRD', birthDate: '2020-05-10', photoUrl: 'img/pet1.jpeg', notes: 'Adora buscar a bolinha.' }, { id: generateUniqueId('pet'), ownerId: clientId1, name: 'Mimi', species: 'Gato', breed: 'Siamês', birthDate: '2021-01-15', photoUrl: 'img/pet2.jpeg', notes: 'Dorme muito durante o dia.' }, { id: generateUniqueId('pet'), ownerId: clientId2, name: 'Loro', species: 'Ave', breed: 'Papagaio', birthDate: '2019-11-01', photoUrl: 'img/pet3.jpeg', notes: 'Repete algumas palavras.' }, { id: generateUniqueId('pet'), ownerId: clientId2, name: 'Max', species: 'Cão', breed: 'Golden Retriever', birthDate: '2022-02-20', photoUrl: DEFAULT_PET_PHOTO, notes: 'Muito brincalhão e ativo.' }]; saveToLocalStorage(storageKeys.pets, samplePets); let availabilities = []; const today = new Date(); today.setHours(0, 0, 0, 0); const upcoming = []; for (let i = 1; i < 15; i++) { const d = new Date(today); d.setDate(today.getDate() + i); const dayOfWeek = d.getDay(); if (dayOfWeek > 0 && dayOfWeek < 6) upcoming.push(d.toISOString().split('T')[0]); } const year2025 = 2025; const months2025 = [3, 4]; const days2025 = []; months2025.forEach(monthIndex => { const daysInMonth = new Date(year2025, monthIndex + 1, 0).getDate(); for (let day = 1; day <= daysInMonth; day++) { const currentDate = new Date(year2025, monthIndex, day); if ([2, 3, 4].includes(currentDate.getDay())) { days2025.push(`${year2025}-${(monthIndex + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`); } } }); const allDates = [...upcoming, ...days2025.sort(() => 0.5 - Math.random()).slice(0, Math.max(0, 30 - upcoming.length))]; let availabilityCount = 0; if (vetIds.length > 0) { allDates.forEach(dateString => { const numVetsAvailable = (Math.random() > 0.6 && vetIds.length > 1) ? 2 : 1; const shuffledVets = vetIds.sort(() => 0.5 - Math.random()); for (let i = 0; i < numVetsAvailable && availabilityCount < 30; i++) { const vetId = shuffledVets[i]; if (!availabilities.some(a => a && a.date === dateString && a.vetId === vetId)) { availabilities.push({ id: generateUniqueId('availability'), date: dateString, vetId: vetId }); availabilityCount++; } } }); console.log(`Geradas ${availabilityCount} disponibilidades de exemplo.`); } saveToLocalStorage(storageKeys.availability, availabilities); if (vet1Id && samplePets.length >= 3 && availabilities.length >= 3) { let bookedConsultations = []; let recipes = []; const vet1Availabilities = availabilities.filter(a => a && a.vetId === vet1Id && new Date(a.date + 'T00:00:00') >= today).sort((a, b) => a.date.localeCompare(b.date)).slice(0, 3); const petIdsToBook = [samplePets[0].id, samplePets[1].id, samplePets[3].id]; const clientIdsForPets = [samplePets[0].ownerId, samplePets[1].ownerId, samplePets[3].ownerId]; let bookedCount = 0; const vet1Email = users.find(u => u && u.id === vet1Id)?.email; if (vet1Availabilities.length > 0) { for (let i = 0; i < vet1Availabilities.length; i++) { const availability = vet1Availabilities[i]; if (!availability || i >= petIdsToBook.length) break; const consultationId = generateUniqueId('booked_consultation'); let recipeId = null; if (bookedCount < 2) { recipeId = generateUniqueId('recipe'); recipes.push({ id: recipeId, consultationId: consultationId, vetId: vet1Id, petId: petIdsToBook[i], clientId: clientIdsForPets[i], medication: i === 0 ? 'Antibiótico X (100mg)' : 'Anti-inflamatório Y (5mg)', dosage: i === 0 ? '1 comprimido a cada 12 horas por 7 dias' : '1 comprimido a cada 24 horas por 3 dias', instructions: i === 0 ? 'Administrar junto com a refeição.' : '', dateIssued: availability.date }); } bookedConsultations.push({ id: consultationId, date: availability.date, time: `1${i + 3}:00`, petId: petIdsToBook[i], clientId: clientIdsForPets[i], vetId: vet1Id, reason: `Consulta de Exemplo ${i + 1}`, status: 'Agendada', diagnosis: i === 0 ? 'Diagnóstico inicial de exemplo. Necessita acompanhamento.' : null, recipeId: recipeId }); const availabilityIndex = availabilities.findIndex(a => a && a.id === availability.id); if (availabilityIndex !== -1) availabilities.splice(availabilityIndex, 1); bookedCount++; } saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations); saveToLocalStorage(storageKeys.recipes, recipes); saveToLocalStorage(storageKeys.availability, availabilities); console.log(`Geradas ${bookedCount} consultas de exemplo.`); } else { console.warn(`Nenhuma disponibilidade futura encontrada para ${vet1Email} para gerar consultas de exemplo.`); } } else { console.warn("Não foi possível gerar consultas de exemplo (faltam vets, pets ou disponibilidades)."); } console.log("Dados de exemplo v1.37 OK."); } catch (initError) { console.error("Falha crítica ao inicializar dados de exemplo:", initError); alert("Erro grave ao inicializar a aplicação. O armazenamento local pode estar cheio ou corrompido."); } } else { loadIdCounters(); if (localStorage.getItem(storageKeys.availability) === null) saveToLocalStorage(storageKeys.availability, []); if (localStorage.getItem(storageKeys.booked_consultations) === null) saveToLocalStorage(storageKeys.booked_consultations, []); if (localStorage.getItem(storageKeys.recipes) === null) saveToLocalStorage(storageKeys.recipes, []); } }

function getAllUsers() { return loadFromLocalStorage(storageKeys.users); }
function getUserById(userId) { return getAllUsers().find(u => u && u.id === Number(userId)); }
function getAllVeterinarians() { return getAllUsers().filter(u => u && u.profile === 'veterinarian'); }
function getAllPets() { return loadFromLocalStorage(storageKeys.pets); }
function getPetById(petId) { return getAllPets().find(p => p && p.id === Number(petId)); }
function getAllPetsByUser(userId) { const userProfile = getUserProfile(); const allPetsData = getAllPets(); userId = Number(userId); if (!userProfile) return []; if (userProfile === 'administrator' || userProfile === 'veterinarian') { const allUsersData = getAllUsers(); return allPetsData.filter(p => p != null).map(pet => { const owner = allUsersData.find(u => u && u.id === pet.ownerId); return { ...pet, ownerName: owner ? owner.name : 'Desconhecido' }; }); } else if (userProfile === 'client') { return allPetsData.filter(pet => pet && pet.ownerId === userId); } else { return []; } }
function getAllAvailabilities() { return loadFromLocalStorage(storageKeys.availability); }
function getAllBookedConsultations() { return loadFromLocalStorage(storageKeys.booked_consultations); }
function getClientBookedConsultations(clientId) { clientId = Number(clientId); return getAllBookedConsultations().filter(c => c && c.clientId === clientId); }
function getBookedConsultationById(consultationId) { const allConsultations = getAllBookedConsultations(); return allConsultations.find(c => c && c.id === Number(consultationId)); }
function getAllRecipes() { return loadFromLocalStorage(storageKeys.recipes); }
function getRecipeById(recipeId) { return getAllRecipes().find(r => r && r.id === Number(recipeId)); }
function getRecipeByConsultationId(consultationId) { return getAllRecipes().find(r => r && r.consultationId === Number(consultationId)); }

function addAvailability(dateString, vetId) { const availabilities = getAllAvailabilities(); const veterinarianId = Number(vetId); const existingAvailability = availabilities.some(a => a && a.date === dateString && a.vetId === veterinarianId); if (existingAvailability) { return { success: false, message: 'Disponibilidade já cadastrada para este veterinário nesta data.' }; } const newAvailability = { id: generateUniqueId('availability'), date: dateString, vetId: veterinarianId }; availabilities.push(newAvailability); try { saveToLocalStorage(storageKeys.availability, availabilities); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const uniqueAvailableDates = [...new Set(getAllAvailabilities().map(a => a.date))]; clientFlatpickrInstance.set('enable', uniqueAvailableDates); } return { success: true, message: 'Disponibilidade salva com sucesso.', data: newAvailability }; } catch (error) { console.error("Erro ao salvar disponibilidade:", error); return { success: false, message: "Erro ao salvar disponibilidade. Verifique o armazenamento." }; } }
function deleteAvailability(availabilityId) { let availabilities = getAllAvailabilities(); const idToDelete = Number(availabilityId); const availabilityToDelete = availabilities.find(a => a && a.id === idToDelete); if (!availabilityToDelete) { showMessage('consultations-message', 'Erro: Disponibilidade não encontrada.', 'danger'); return; } const initialLength = availabilities.length; availabilities = availabilities.filter(a => a && a.id !== idToDelete); if (availabilities.length < initialLength) { try { saveToLocalStorage(storageKeys.availability, availabilities); showMessage('consultations-message', 'Disponibilidade excluída com sucesso.', 'success'); renderAdminAvailabilitiesList('availabilitiesList'); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const uniqueAvailableDates = [...new Set(getAllAvailabilities().map(a => a.date))]; clientFlatpickrInstance.set('enable', uniqueAvailableDates); } } catch (error) { showMessage('consultations-message', 'Erro ao salvar após excluir disponibilidade.', 'danger'); } } else { showMessage('consultations-message', 'Erro ao excluir disponibilidade (não encontrada na filtragem).', 'danger'); } }

function bookConsultation(bookingData) { const bookedConsultations = getAllBookedConsultations(); let availabilities = getAllAvailabilities(); const veterinarianId = Number(bookingData.vetId); const petId = Number(bookingData.petId); const clientId = Number(bookingData.clientId); const availabilityIndex = availabilities.findIndex(a => a && a.date === bookingData.date && a.vetId === veterinarianId); if (availabilityIndex === -1) { return { success: false, message: 'Erro: Horário ou veterinário indisponível para a data selecionada.' }; } const newBooking = { id: generateUniqueId('booked_consultation'), date: bookingData.date, time: 'Não Definido', petId: petId, clientId: clientId, vetId: veterinarianId, reason: bookingData.reason || 'Não especificado', status: 'Agendada', diagnosis: null, recipeId: null }; bookedConsultations.push(newBooking); try { saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations); const removedAvailability = availabilities.splice(availabilityIndex, 1)[0]; saveToLocalStorage(storageKeys.availability, availabilities); console.log(`Consulta ${newBooking.id} agendada. Disponibilidade ${removedAvailability?.id} removida.`); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const remainingAvailabilityOnDate = availabilities.some(a => a && a.date === bookingData.date); if (!remainingAvailabilityOnDate) { const currentEnabledDates = clientFlatpickrInstance.config.enable.map(d => d instanceof Date ? d.toISOString().split('T')[0] : d); const newEnabledDates = currentEnabledDates.filter(d => d !== bookingData.date); clientFlatpickrInstance.set('enable', newEnabledDates); } } return { success: true, message: 'Consulta agendada com sucesso!', data: newBooking }; } catch (error) { console.error("Erro ao salvar agendamento ou disponibilidade:", error); const revertIndex = bookedConsultations.findIndex(b => b && b.id === newBooking.id); if (revertIndex > -1) bookedConsultations.splice(revertIndex, 1); return { success: false, message: "Erro ao salvar o agendamento. Verifique o armazenamento." }; } }

function updateConsultationStatus(consultationId, newStatus) { let bookedConsultations = getAllBookedConsultations(); const index = bookedConsultations.findIndex(b => b && b.id === Number(consultationId)); if (index === -1) { return { success: false, message: "Consulta não encontrada." }; } if (!['Agendada', 'Compareceu', 'Não Compareceu'].includes(newStatus)) { return { success: false, message: "Status inválido." }; } bookedConsultations[index].status = newStatus; try { saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations); return { success: true, message: "Status da consulta atualizado com sucesso." }; } catch (error) { return { success: false, message: "Erro ao salvar o status da consulta." }; } }
function updateConsultationDiagnosis(consultationId, diagnosisText) { let bookedConsultations = getAllBookedConsultations(); const index = bookedConsultations.findIndex(b => b && b.id === Number(consultationId)); if (index === -1) { return { success: false, message: "Consulta não encontrada." }; } bookedConsultations[index].diagnosis = diagnosisText; try { saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations); return { success: true, message: "Diagnóstico salvo com sucesso." }; } catch (error) { return { success: false, message: "Erro ao salvar o diagnóstico." }; } }

function addOrUpdateRecipe(recipeData) { let recipes = getAllRecipes(); let consultation = getBookedConsultationById(recipeData.consultationId); if (!consultation) { return { success: false, message: "Consulta associada não encontrada." }; } const now = new Date().toISOString().split('T')[0]; const recipePayload = { medication: recipeData.medication, dosage: recipeData.dosage, instructions: recipeData.instructions || '', vetId: Number(recipeData.vetId), petId: Number(consultation.petId), clientId: Number(consultation.clientId), consultationId: Number(recipeData.consultationId), dateIssued: now }; try { if (recipeData.recipeId) { const index = recipes.findIndex(r => r && r.id === Number(recipeData.recipeId)); if (index === -1) { return { success: false, message: "Receita a ser atualizada não encontrada." }; } recipes[index] = { ...recipes[index], ...recipePayload }; saveToLocalStorage(storageKeys.recipes, recipes); return { success: true, message: "Receita atualizada com sucesso.", data: recipes[index] }; } else { recipePayload.id = generateUniqueId('recipe'); recipes.push(recipePayload); saveToLocalStorage(storageKeys.recipes, recipes); let bookedConsultations = getAllBookedConsultations(); const bookedConsultationIndex = bookedConsultations.findIndex(b => b && b.id === recipePayload.consultationId); if (bookedConsultationIndex !== -1) { bookedConsultations[bookedConsultationIndex].recipeId = recipePayload.id; saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations); } else { console.warn(`Consulta ${recipePayload.consultationId} não encontrada para associar o ID da receita.`); } return { success: true, message: "Receita salva com sucesso.", data: recipePayload }; } } catch (error) { console.error("Erro ao salvar receita ou consulta associada:", error); return { success: false, message: "Erro ao salvar a receita. Verifique o armazenamento." }; } }

function addPet(petData) { const allPets = getAllPets(); const loggedInUserId = getLoggedInUserId(); const userProfile = getUserProfile(); let ownerIdToUse = loggedInUserId; if (userProfile === 'administrator' && petData.ownerId) { ownerIdToUse = Number(petData.ownerId); } const newPet = { id: generateUniqueId('pet'), ownerId: ownerIdToUse, name: petData.name, species: petData.species, breed: petData.breed || 'Não informada', birthDate: petData.birthDate || null, photoUrl: petData.photoUrl || DEFAULT_PET_PHOTO, notes: petData.notes || '' }; allPets.push(newPet); try { saveToLocalStorage(storageKeys.pets, allPets); return newPet; } catch (error) { console.error("Erro ao adicionar pet:", error); return null; } }
function updatePet(petData) { let allPets = getAllPets(); const userProfile = getUserProfile(); const index = allPets.findIndex(p => p && p.id === Number(petData.id)); if (index !== -1) { const oldPhoto = allPets[index].photoUrl; const newPhoto = petData.photoUrl; const finalPhotoUrl = (newPhoto && newPhoto !== DEFAULT_PET_PHOTO) ? newPhoto : (oldPhoto || DEFAULT_PET_PHOTO); let ownerIdToUse = allPets[index].ownerId; if (userProfile === 'administrator' && petData.ownerId) { ownerIdToUse = Number(petData.ownerId); } allPets[index] = { ...allPets[index], ownerId: ownerIdToUse, name: petData.name, species: petData.species, breed: petData.breed || 'Não informada', birthDate: petData.birthDate || null, photoUrl: finalPhotoUrl, notes: petData.notes || '' }; try { saveToLocalStorage(storageKeys.pets, allPets); return allPets[index]; } catch (error) { console.error("Erro ao atualizar pet:", error); return null; } } return null; }
function deletePet(petId) { let allPets = getAllPets(); const initialLength = allPets.length; allPets = allPets.filter(p => p && p.id !== Number(petId)); if (allPets.length < initialLength) { try { saveToLocalStorage(storageKeys.pets, allPets); return true; } catch (error) { console.error("Erro ao salvar após deletar pet:", error); return false; } } return false; }

function deleteUser(userId) { let users = getAllUsers(); userId = Number(userId); const loggedInUserId = getLoggedInUserId(); const userToDelete = users.find(u => u && u.id === userId); if (!userToDelete) { return { success: false, message: "Usuário não encontrado." }; } if (userToDelete.id === loggedInUserId) { return { success: false, message: "Você não pode excluir a si mesmo." }; } const administrators = users.filter(u => u && u.profile === 'administrator'); if (userToDelete.profile === 'administrator' && administrators.length <= 1) { return { success: false, message: "Não é possível excluir o último administrador do sistema." }; } const initialLength = users.length; const userProfileBeforeDelete = userToDelete.profile; users = users.filter(u => u && u.id !== userId); if (users.length < initialLength) { try { saveToLocalStorage(storageKeys.users, users); console.log(`Usuário ID ${userId} excluído.`); return { success: true, message: "Usuário excluído com sucesso.", userProfileBeforeDelete: userProfileBeforeDelete }; } catch (error) { console.error("Erro ao salvar após deletar usuário:", error); return { success: false, message: "Erro ao salvar a lista de usuários após a exclusão." }; } } return { success: false, message: "Erro ao excluir usuário (não removido da lista)." }; }
function updateUser(userData) { let users = getAllUsers(); const index = users.findIndex(u => u && u.id === Number(userData.id)); if (index === -1) { return { success: false, message: "Usuário a ser atualizado não encontrado." }; } users[index] = { ...users[index], name: userData.name, email: userData.email, profile: userData.profile }; try { saveToLocalStorage(storageKeys.users, users); return { success: true, message: "Usuário atualizado com sucesso." }; } catch (error) { console.error("Erro ao atualizar usuário:", error); return { success: false, message: "Erro ao salvar as alterações do usuário." }; } }

function showMessage(elementId, message, type = 'success', duration = 4000) { const element = document.getElementById(elementId); if (!element) { console.warn(`Elemento com ID '${elementId}' não encontrado para exibir mensagem.`); return; } element.className = 'form-message'; element.textContent = ''; element.removeAttribute('role'); if (message) { element.classList.add('alert', `alert-${type}`, 'alert-dismissible', 'fade', 'show'); let iconClass = ''; switch (type) { case 'success': iconClass = 'bi-check-circle-fill'; break; case 'danger': iconClass = 'bi-x-octagon-fill'; break; case 'warning': iconClass = 'bi-exclamation-triangle-fill'; break; case 'info': iconClass = 'bi-info-circle-fill'; break; } element.innerHTML = `${iconClass ? '<i class="bi ' + iconClass + ' me-2"></i>' : ''}${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>`; element.setAttribute('role', 'alert'); if (duration > 0) { setTimeout(() => { const currentElement = document.getElementById(elementId); if (currentElement && currentElement.classList.contains('show')) { try { const alertInstance = bootstrap.Alert.getOrCreateInstance(currentElement); if (alertInstance) { alertInstance.close(); } } catch (e) { console.error("Erro ao fechar alerta bootstrap:", e); currentElement.classList.remove('show'); } } }, duration); } } }
function clearForm(formId) {
    const form = document.getElementById(formId); if (!form) return; form.reset(); form.classList.remove('was-validated'); form.querySelectorAll('.is-valid, .is-invalid').forEach(element => element.classList.remove('is-valid', 'is-invalid')); form.querySelectorAll('input, select, textarea').forEach(element => { if (typeof element.setCustomValidity === 'function') { element.setCustomValidity(''); } if (element.tagName === 'SELECT' && ['bookingPetId', 'bookingVetId'].includes(element.id)) { element.disabled = true; if (element.id === 'bookingVetId') { element.innerHTML = '<option value="" disabled selected>Selecione uma data primeiro</option>'; } } }); if (formId === 'petForm') { const photoPreview = document.getElementById('photoPreview'); if (photoPreview) photoPreview.src = DEFAULT_PET_PHOTO; const fileInput = document.getElementById('petPhotoFile'); if (fileInput) fileInput.value = ''; const fileError = document.getElementById('file-error-message'); if (fileError) fileError.textContent = ''; const ownerSelect = document.getElementById('petOwnerId'); if (ownerSelect) ownerSelect.selectedIndex = 0; } else if (formId === 'registerUserForm') { const emailInput = document.getElementById('email'); if (emailInput) emailInput.classList.remove('is-invalid'); } else if (formId === 'bookingForm') { const displayDate = document.getElementById('displaySelectedBookingDate'); if (displayDate) displayDate.textContent = 'Nenhuma'; const hiddenDate = document.getElementById('selectedBookingDateHidden'); if (hiddenDate) hiddenDate.value = ''; const dateRequiredFeedback = document.getElementById('date-required-feedback'); if (dateRequiredFeedback) dateRequiredFeedback.style.display = 'none'; const bookButton = document.getElementById('bookAppointmentButton'); if (bookButton) bookButton.disabled = true; if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { clientFlatpickrInstance.clear(); } } else if (formId === 'diagnosisForm') {
        const consultationIdInput = document.getElementById('diagnosisConsultationId');

        if (consultationIdInput && document.getElementById('diagnosisModal') && !document.getElementById('diagnosisModal').classList.contains('show')) { consultationIdInput.value = ''; } const consultationInfo = document.getElementById('diagnosisModalConsultationInfo'); if (consultationInfo) consultationInfo.textContent = 'Carregando...'; const diagnosisTextArea = document.getElementById('diagnosisText'); if (diagnosisTextArea) diagnosisTextArea.value = '';
    } else if (formId === 'recipeForm') {
        const consultationIdInput = document.getElementById('recipeConsultationId');

        if (consultationIdInput && document.getElementById('recipeModal') && !document.getElementById('recipeModal').classList.contains('show')) { consultationIdInput.value = ''; } const existingRecipeIdInput = document.getElementById('existingRecipeId'); if (existingRecipeIdInput) existingRecipeIdInput.value = ''; const consultationInfo = document.getElementById('recipeModalConsultationInfo'); if (consultationInfo) consultationInfo.textContent = 'Carregando...';
    } else if (formId === 'availabilityForm') { const vetSelect = document.getElementById('availabilityVetId'); if (vetSelect) vetSelect.selectedIndex = 0; const dateInput = document.getElementById('availabilityDateInput'); if (dateInput) dateInput.value = ''; } const formMessageElement = document.getElementById(`${formId}-message`); if (formMessageElement) { showMessage(formMessageElement.id, '', '', 0); } else { const generalMessageElement = form.querySelector('.form-message'); if (generalMessageElement && generalMessageElement.id) { showMessage(generalMessageElement.id, '', '', 0); } }
}
function calculateAge(birthDateString) { if (!birthDateString) return 'Idade desconhecida'; try { const birthDate = new Date(birthDateString + 'T00:00:00'); if (isNaN(birthDate.getTime())) return 'Data inválida'; const today = new Date(); today.setHours(0, 0, 0, 0); let years = today.getFullYear() - birthDate.getFullYear(); let months = today.getMonth() - birthDate.getMonth(); let days = today.getDate() - birthDate.getDate(); if (days < 0) { months--; const lastMonth = new Date(today.getFullYear(), today.getMonth(), 0); days += lastMonth.getDate(); } if (months < 0) { years--; months += 12; } if (years > 1) return `${years} anos`; if (years === 1) { return `1 ano${months > 0 ? ` e ${months} mês${months > 1 ? 'es' : ''}` : ''}`; } if (months > 1) return `${months} meses`; if (months === 1) return `1 mês`; if (days >= 7) { const weeks = Math.floor(days / 7); return `${weeks} semana${weeks > 1 ? 's' : ''}`; } if (days > 1) return `${days} dias`; if (days === 1) return `1 dia`; return `Recém-nascido`; } catch (e) { console.error("Erro ao calcular idade:", e); return "Erro"; } }
function translateProfile(profile) { switch (profile) { case 'administrator': return 'Administrador(a)'; case 'veterinarian': return 'Veterinário(a)'; case 'client': return 'Cliente'; default: return 'Desconhecido'; } }
function getDefaultProfilePhoto(profile) { return DEFAULT_USER_PHOTO[profile] || DEFAULT_USER_PHOTO.default; }

function getLoggedInUserId() { const userId = localStorage.getItem(storageKeys.loggedInUser); return userId ? Number(userId) : null; }
function getUserProfile() { const userId = getLoggedInUserId(); if (userId) { const user = getUserById(userId); return user ? user.profile : null; } return null; }
function handleLogin(event) { event.preventDefault(); const form = event.target; const messageElement = form.querySelector('#form-message'); if (messageElement) showMessage(messageElement.id, '', '', 0); form.classList.add('was-validated'); if (!form.checkValidity()) { event.stopPropagation(); return; } const email = form.querySelector('#email').value; const password = form.querySelector('#password').value; const foundUser = getAllUsers().find(user => user && user.email.toLowerCase() === email.toLowerCase() && user.password === password); if (foundUser) { localStorage.setItem(storageKeys.loggedInUser, foundUser.id); if (messageElement) showMessage(messageElement.id, `Login bem-sucedido! Redirecionando...`, 'success', 1500); setTimeout(() => window.location.href = 'dashboard.html', 1000); } else { if (messageElement) showMessage(messageElement.id, 'Email ou senha inválidos.', 'danger'); const passwordInput = form.querySelector('#password'); if (passwordInput) passwordInput.value = ''; form.classList.remove('was-validated'); } }
function handleLogout(event) { if (event) event.preventDefault(); localStorage.removeItem(storageKeys.loggedInUser); localStorage.removeItem(storageKeys.sidebarState); window.location.href = 'index.html'; }

function checkLoginAndSetupPage() { const userId = getLoggedInUserId(); const currentPage = window.location.pathname.split('/').pop() || 'index.html'; const publicPages = ['index.html', 'forgot_password.html']; const registrationPage = 'register.html'; const adminOnlyPages = ['manage_users.html']; const body = document.body; body.classList.remove('logged-in', 'logged-out', 'admin-registering', 'self-registering'); body.classList.forEach(className => { if (className.startsWith('profile-')) { body.classList.remove(className); } }); const userNameDisplayDesktop = document.getElementById('loggedInUserNameDisplay'); const userNameDisplayMobile = document.getElementById('loggedInUserNameDisplayMobile'); const userProfileDisplay = document.getElementById('loggedInUserProfile'); if (userNameDisplayDesktop) userNameDisplayDesktop.innerHTML = ''; if (userNameDisplayMobile) userNameDisplayMobile.innerHTML = ''; if (userProfileDisplay) userProfileDisplay.textContent = 'Carregando...'; if (userId) { const user = getUserById(userId); if (!user) { console.error(`Usuário logado com ID ${userId} não encontrado na base de dados.`); handleLogout(); return false; } body.classList.add('logged-in', `profile-${user.profile}`); const profileTranslated = translateProfile(user.profile); const userDisplayHtml = `<i class="bi bi-person-circle me-1"></i> Olá, ${user.name.split(' ')[0]} (${profileTranslated})`; if (userNameDisplayDesktop) userNameDisplayDesktop.innerHTML = userDisplayHtml; if (userNameDisplayMobile) userNameDisplayMobile.innerHTML = userDisplayHtml; if (userProfileDisplay) userProfileDisplay.textContent = `${user.name} (${profileTranslated})`; if (currentPage === registrationPage) { if (user.profile === 'administrator') { body.classList.add('admin-registering'); if (body.classList.contains('body-with-sidebar')) { setupSidebar(); const pageTitle = document.getElementById('registerPageTitle'); if (pageTitle) pageTitle.textContent = 'Cadastrar Novo Usuário'; } return true; } else { window.location.href = 'dashboard.html'; return false; } } if (publicPages.includes(currentPage)) { window.location.href = 'dashboard.html'; return false; } if (adminOnlyPages.includes(currentPage) && user.profile !== 'administrator') { window.location.href = 'dashboard.html'; return false; } if (body.classList.contains('body-with-sidebar')) { setupSidebar(); } else { body.style.paddingTop = '0'; } } else { body.classList.add('logged-out'); if (currentPage === registrationPage) { body.classList.add('self-registering'); body.style.paddingTop = '0'; const pageTitle = document.getElementById('registerPageTitle'); if (pageTitle) pageTitle.textContent = 'Crie sua Conta'; document.querySelectorAll('.profile-select-wrapper, .cancel-button-wrapper').forEach(element => element.style.display = 'none'); document.querySelectorAll('.back-login-button-wrapper').forEach(element => element.style.display = 'block'); return true; } if (publicPages.includes(currentPage) || currentPage === registrationPage) { body.style.paddingTop = '0'; return true; } else { window.location.href = 'index.html'; return false; } } return true; }

function handleRegisterUser(event) { event.preventDefault(); console.log("handleRegisterUser v1.29 (base v1.25) iniciado."); const form = event.target; const messageElement = form.querySelector('#form-message'); const nameInput = form.querySelector('#name'); const emailInput = form.querySelector('#email'); const passwordInput = form.querySelector('#password'); const confirmPasswordInput = form.querySelector('#confirmPassword'); const submitButton = form.querySelector('#registerSubmitButton'); if (messageElement) showMessage(messageElement.id, '', '', 0); form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid')); let valid = true; if (!nameInput.value) { if (messageElement) showMessage(messageElement.id, 'O campo Nome Completo é obrigatório.', 'warning'); nameInput.classList.add('is-invalid'); valid = false; } if (!emailInput.value || !/\S+@\S+\.\S+/.test(emailInput.value)) { if (messageElement && valid) showMessage(messageElement.id, 'Por favor, insira um email válido.', 'warning'); emailInput.classList.add('is-invalid'); valid = false; } if (!passwordInput.value || passwordInput.value.length < 6) { if (messageElement && valid) showMessage(messageElement.id, 'A senha deve ter pelo menos 6 caracteres.', 'warning'); passwordInput.classList.add('is-invalid'); valid = false; } if (!confirmPasswordInput.value) { if (messageElement && valid) showMessage(messageElement.id, 'Confirme sua senha.', 'warning'); confirmPasswordInput.classList.add('is-invalid'); valid = false; } if (passwordInput.value !== confirmPasswordInput.value) { if (messageElement && valid) showMessage(messageElement.id, 'As senhas não coincidem.', 'warning'); confirmPasswordInput.classList.add('is-invalid'); valid = false; } if (!valid) { const firstInvalid = form.querySelector('.is-invalid'); if (firstInvalid) firstInvalid.focus(); return; } const email = emailInput.value; const users = getAllUsers(); if (users.some(u => u && u.email.toLowerCase() === email.toLowerCase())) { if (messageElement) showMessage(messageElement.id, 'Este endereço de email já está cadastrado.', 'danger'); emailInput.classList.add('is-invalid'); emailInput.focus(); return; } console.log("Validações OK. Tentando cadastrar..."); if (submitButton) submitButton.disabled = true; const newUser = { id: generateUniqueId('user'), name: nameInput.value, email: email, password: passwordInput.value, profile: 'client', photoUrl: null }; try { users.push(newUser); saveToLocalStorage(storageKeys.users, users); console.log("Usuário salvo com sucesso."); if (messageElement) showMessage(messageElement.id, `Cadastro realizado com sucesso! Redirecionando para login...`, 'success', 3500); setTimeout(() => { console.log("Redirecionando para index.html..."); window.location.href = 'index.html'; }, 3000); } catch (storageError) { console.error("Falha ao salvar usuário:", storageError); const failedUserIndex = users.findIndex(u => u.id === newUser.id); if (failedUserIndex > -1) users.splice(failedUserIndex, 1); if (submitButton) submitButton.disabled = false; } }

function handleForgotPassword(event) { event.preventDefault(); const form = event.target; const messageElement = form.querySelector('#form-message'); if (messageElement) showMessage(messageElement.id, '', '', 0); form.classList.add('was-validated'); if (!form.checkValidity()) { event.stopPropagation(); return; } const emailInput = form.querySelector('#email'); const email = emailInput.value; if (getAllUsers().some(user => user && user.email.toLowerCase() === email.toLowerCase())) { if (messageElement) showMessage(messageElement.id, `Um link de recuperação (simulado) foi enviado para ${email}.`, 'success'); form.reset(); form.classList.remove('was-validated'); } else { if (messageElement) showMessage(messageElement.id, 'Este email não está cadastrado no sistema.', 'danger'); if (emailInput) emailInput.classList.add('is-invalid'); form.classList.remove('was-validated'); } }
function handlePasswordChangeSubmit(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const messageElement = document.getElementById('password-change-message'); const currentPasswordInput = document.getElementById('currentPassword'); const newPasswordInput = document.getElementById('newPassword'); const confirmPasswordInput = document.getElementById('confirmNewPassword'); showMessage(messageElement.id, '', '', 0); confirmPasswordInput.setCustomValidity(''); if (newPasswordInput.value !== confirmPasswordInput.value) { confirmPasswordInput.setCustomValidity('As senhas não coincidem.'); } form.classList.add('was-validated'); if (!form.checkValidity()) { return; } const userId = getLoggedInUserId(); const users = getAllUsers(); const userIndex = users.findIndex(u => u && u.id === userId); if (userIndex === -1) { showMessage(messageElement.id, 'Erro: Usuário não encontrado.', 'danger'); return; } if (users[userIndex].password !== currentPasswordInput.value) { showMessage(messageElement.id, 'Senha atual incorreta.', 'danger'); currentPasswordInput.value = ''; currentPasswordInput.focus(); form.classList.remove('was-validated'); currentPasswordInput.classList.add('is-invalid'); return; } users[userIndex].password = newPasswordInput.value; try { saveToLocalStorage(storageKeys.users, users); showMessage(messageElement.id, 'Senha alterada com sucesso!', 'success'); clearForm(form.id); form.classList.remove('was-validated'); } catch (error) { showMessage(messageElement.id, 'Erro ao salvar a nova senha.', 'danger'); } }
function handlePhotoUploadSubmit(event) { event.preventDefault(); const form = event.target; const fileInput = document.getElementById('profilePhotoFile'); const fileErrorMessage = document.getElementById('profile-file-error-message'); const photoPreview = document.getElementById('profilePhotoPreview'); const profileMessage = document.getElementById('profile-message'); showMessage(profileMessage.id, '', '', 0); fileErrorMessage.textContent = ''; const file = fileInput.files[0]; if (!file) { fileErrorMessage.textContent = 'Por favor, selecione um arquivo de imagem.'; return; } if (!file.type.startsWith('image/')) { fileErrorMessage.textContent = 'Formato de arquivo inválido. Use JPG, PNG, GIF ou WebP.'; fileInput.value = ''; return; } if (file.size > MAX_FILE_SIZE_BYTES) { fileErrorMessage.textContent = `Arquivo muito grande (Máximo: ${MAX_FILE_SIZE_MB}MB).`; fileInput.value = ''; return; } const reader = new FileReader(); reader.onload = (e) => { const newPhotoDataUrl = e.target.result; const userId = getLoggedInUserId(); let users = getAllUsers(); const userIndex = users.findIndex(u => u && u.id === userId); if (userIndex === -1) { showMessage(profileMessage.id, 'Erro: Usuário não encontrado para salvar a foto.', 'danger'); return; } users[userIndex].photoUrl = newPhotoDataUrl; try { saveToLocalStorage(storageKeys.users, users); if (photoPreview) photoPreview.src = newPhotoDataUrl; showMessage(profileMessage.id, 'Foto de perfil atualizada com sucesso!', 'success'); fileInput.value = ''; } catch (error) { console.error("Erro ao salvar foto no localStorage:", error); showMessage(profileMessage.id, 'Erro ao salvar a foto. Verifique o console.', 'danger'); } }; reader.onerror = () => { showMessage(profileMessage.id, 'Erro ao ler o arquivo de imagem.', 'danger'); }; reader.readAsDataURL(file); }

function setupSidebar() { const toggleButtons = document.querySelectorAll('.nav_toggle'); const navbar = document.getElementById('navbar'); const bodyElement = document.body; if (toggleButtons.length > 0 && navbar && bodyElement && bodyElement.classList.contains('body-with-sidebar')) { toggleButtons.forEach(toggle => { toggle.removeEventListener('click', toggleSidebar); toggle.addEventListener('click', toggleSidebar); }); window.removeEventListener('resize', handleSidebarResize); window.addEventListener('resize', handleSidebarResize); initializeSidebarState(); adjustContentPadding(); } else { toggleButtons.forEach(toggle => toggle.removeEventListener('click', toggleSidebar)); window.removeEventListener('resize', handleSidebarResize); if (bodyElement) { bodyElement.style.paddingTop = '0'; document.documentElement.style.setProperty('--mobile-header-height', '0px'); } } }
function initializeSidebarState() { const navbar = document.getElementById('navbar'); const bodyElement = document.body; const toggleButtons = document.querySelectorAll('.nav_toggle'); if (!navbar || !bodyElement || toggleButtons.length === 0 || !bodyElement.classList.contains('body-with-sidebar')) return; const sidebarState = localStorage.getItem(storageKeys.sidebarState); const isDesktop = window.innerWidth >= LG_BREAKPOINT; let shouldExpand = false; if (isDesktop) { shouldExpand = (sidebarState !== 'retracted'); navbar.classList.toggle('show-sidebar', shouldExpand); } else { shouldExpand = false; navbar.classList.remove('show-sidebar'); } updateToggleIcons(shouldExpand); }
function toggleSidebar() { const navbar = document.getElementById('navbar'); const bodyElement = document.body; if (!navbar || !bodyElement || !bodyElement.classList.contains('body-with-sidebar')) return; const isDesktop = window.innerWidth >= LG_BREAKPOINT; const isCurrentlyExpanded = navbar.classList.contains('show-sidebar'); const shouldExpand = !isCurrentlyExpanded; navbar.classList.toggle('show-sidebar', shouldExpand); if (isDesktop) { localStorage.setItem(storageKeys.sidebarState, shouldExpand ? 'expanded' : 'retracted'); } else { localStorage.removeItem(storageKeys.sidebarState); } updateToggleIcons(shouldExpand); adjustContentPadding(); }
function updateToggleIcons(isExpanded) { const toggleButtons = document.querySelectorAll('.nav_toggle'); const iconToAdd = isExpanded ? 'bi-x-lg' : 'bi-list'; const iconToRemove = isExpanded ? 'bi-list' : 'bi-x-lg'; toggleButtons.forEach(element => { element.classList.remove(iconToRemove); element.classList.add(iconToAdd); }); }
function handleSidebarResize() { initializeSidebarState(); adjustContentPadding(); }
function adjustContentPadding() { const bodyElement = document.body; const mobileHeader = document.querySelector('.mobile-header'); if (!bodyElement || !mobileHeader || !bodyElement.classList.contains('logged-in') || !bodyElement.classList.contains('body-with-sidebar')) { document.documentElement.style.setProperty('--mobile-header-height', '0px'); if (bodyElement) bodyElement.style.paddingTop = '0px'; return; } const isMobile = window.innerWidth < LG_BREAKPOINT; const headerHeight = isMobile ? mobileHeader.offsetHeight : 0; document.documentElement.style.setProperty('--mobile-header-height', `${headerHeight}px`); bodyElement.style.paddingTop = isMobile ? `var(--mobile-header-height)` : '0px'; }

function setupDarkMode() { const switches = document.querySelectorAll('#darkModeSwitch, #darkModeSwitchDesktop, #darkModeSwitchMobile'); const initialTheme = getInitialTheme(); applyTheme(initialTheme); if (switches.length > 0) { switches.forEach(element => { element.removeEventListener('change', handleDarkModeToggle); element.addEventListener('change', handleDarkModeToggle); }); } }
function getInitialTheme() { let theme = localStorage.getItem(storageKeys.theme); if (!theme) { theme = window.matchMedia?.('(prefers-color-scheme: dark)')?.matches ? 'dark-mode' : 'light-mode'; } return theme; }
function applyTheme(theme) { document.body.classList.toggle('dark-mode', theme === 'dark-mode'); document.body.classList.toggle('light-mode', theme !== 'dark-mode'); const switches = document.querySelectorAll('#darkModeSwitch, #darkModeSwitchDesktop, #darkModeSwitchMobile'); const isChecked = (theme === 'dark-mode'); switches.forEach(element => { if (element.checked !== isChecked) element.checked = isChecked; }); if (typeof flatpickr !== 'undefined' && document.querySelector('.flatpickr-calendar')) { const themeLink = document.querySelector('link[href*="flatpickr/dist/themes/"]'); if (themeLink) { themeLink.href = theme === 'dark-mode' ? 'https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css' : 'https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css'; } } }
function handleDarkModeToggle(event) { const checkbox = event.target; const newTheme = checkbox.checked ? 'dark-mode' : 'light-mode'; localStorage.setItem(storageKeys.theme, newTheme); applyTheme(newTheme); }

function setupFormValidationAndListeners() { document.querySelectorAll('form.needs-validation').forEach(form => { form.removeEventListener('submit', handleGenericFormValidation, { capture: true }); }); function handleGenericFormValidation(event) { const form = event.target; if (!form.checkValidity()) { const firstInvalid = form.querySelector(':invalid'); if (firstInvalid && typeof firstInvalid.reportValidity === 'function') { firstInvalid.reportValidity(); } event.preventDefault(); event.stopPropagation(); } } const loginForm = document.getElementById('loginForm'); if (loginForm) loginForm.addEventListener('submit', handleLogin); const registerForm = document.getElementById('registerUserForm'); if (registerForm) { registerForm.removeEventListener('submit', handleRegisterUser); registerForm.addEventListener('submit', handleRegisterUser); registerForm.querySelectorAll('input').forEach(input => { input.addEventListener('input', () => { input.classList.remove('is-invalid'); }, { once: false }); }); } const forgotPasswordForm = document.getElementById('forgotPasswordForm'); if (forgotPasswordForm) forgotPasswordForm.addEventListener('submit', handleForgotPassword); const logoutLinkSidebar = document.getElementById('logout-link'); if (logoutLinkSidebar) logoutLinkSidebar.addEventListener('click', handleLogout); const logoutLinkDesktop = document.getElementById('header-logout-link-desktop'); if (logoutLinkDesktop) logoutLinkDesktop.addEventListener('click', handleLogout); const logoutLinkMobile = document.getElementById('header-logout-link-mobile'); if (logoutLinkMobile) logoutLinkMobile.addEventListener('click', handleLogout); const petsCardContainer = document.getElementById('petsCardContainer'); if (petsCardContainer) { petsCardContainer.addEventListener('click', handlePetCardActions); const addPetButton = document.getElementById('addPetButton'); if (addPetButton) addPetButton.addEventListener('click', handleAddPetClick); document.addEventListener('click', (event) => { if (event.target && event.target.id === 'addPetButtonEmpty') { handleAddPetClick(); } }); } const petForm = document.getElementById('petForm'); if (petForm) petForm.addEventListener('submit', handlePetFormSubmit); const confirmDeleteButton = document.getElementById('confirmDeleteButton'); if (confirmDeleteButton) confirmDeleteButton.addEventListener('click', handleConfirmDelete); const petModal = document.getElementById('petModal'); if (petModal) petModal.addEventListener('hidden.bs.modal', handlePetModalClose); const petPhotoInput = document.getElementById('petPhotoFile'); if (petPhotoInput) petPhotoInput.addEventListener('change', handlePhotoFileChange); const petBirthDateInput = document.getElementById('petBirthDate'); if (petBirthDateInput) petBirthDateInput.max = new Date().toISOString().split("T")[0]; const adminAvailabilitiesList = document.getElementById('availabilitiesList'); if (adminAvailabilitiesList) { adminAvailabilitiesList.removeEventListener('click', handleAdminAvailabilityListClick); adminAvailabilitiesList.addEventListener('click', handleAdminAvailabilityListClick); } const vetConsultationsTableBody = document.getElementById('vetBookedConsultationsTable'); if (vetConsultationsTableBody) { vetConsultationsTableBody.removeEventListener('change', handleVetConsultationActions); vetConsultationsTableBody.removeEventListener('click', handleVetConsultationActions); vetConsultationsTableBody.addEventListener('change', handleVetConsultationActions); vetConsultationsTableBody.addEventListener('click', handleVetConsultationActions); } const diagnosisForm = document.getElementById('diagnosisForm'); if (diagnosisForm) { diagnosisForm.removeEventListener('submit', handleSaveDiagnosis); diagnosisForm.addEventListener('submit', handleSaveDiagnosis); } const recipeForm = document.getElementById('recipeForm'); if (recipeForm) { recipeForm.removeEventListener('submit', handleSaveRecipe); recipeForm.addEventListener('submit', handleSaveRecipe); } const printRecipeButton = document.getElementById('printRecipeButton'); if (printRecipeButton) { printRecipeButton.removeEventListener('click', handlePrintRecipe); printRecipeButton.addEventListener('click', handlePrintRecipe); } const clientAppointmentsList = document.getElementById('clientBookedAppointmentsList'); if (clientAppointmentsList) { clientAppointmentsList.removeEventListener('click', handleClientConsultationActions); clientAppointmentsList.addEventListener('click', handleClientConsultationActions); } const bookingPetSelect = document.getElementById('bookingPetId'); const bookingVetSelect = document.getElementById('bookingVetId'); if (bookingPetSelect) { bookingPetSelect.removeEventListener('change', checkBookingButtonState); bookingPetSelect.addEventListener('change', checkBookingButtonState); } if (bookingVetSelect) { bookingVetSelect.removeEventListener('change', checkBookingButtonState); bookingVetSelect.addEventListener('change', checkBookingButtonState); } const usersTableBody = document.getElementById('usersTableBody'); if (usersTableBody) { usersTableBody.removeEventListener('click', handleUserManagementActions); usersTableBody.addEventListener('click', handleUserManagementActions); } const confirmUserDeleteButton = document.getElementById('confirmUserDeleteButton'); if (confirmUserDeleteButton) { confirmUserDeleteButton.removeEventListener('click', handleConfirmUserDelete); confirmUserDeleteButton.addEventListener('click', handleConfirmUserDelete); } const passwordChangeForm = document.getElementById('passwordChangeForm'); if (passwordChangeForm) { passwordChangeForm.removeEventListener('submit', handlePasswordChangeSubmit); passwordChangeForm.addEventListener('submit', handlePasswordChangeSubmit); const newPassword = passwordChangeForm.querySelector('#newPassword'); const confirmNewPassword = passwordChangeForm.querySelector('#confirmNewPassword'); if (newPassword && confirmNewPassword) { const validatePassMatch = () => { if (confirmNewPassword.value !== '' && newPassword.value !== confirmNewPassword.value) { confirmNewPassword.setCustomValidity('As senhas não coincidem.'); } else { confirmNewPassword.setCustomValidity(''); } }; confirmNewPassword.addEventListener('input', validatePassMatch); newPassword.addEventListener('input', validatePassMatch); } } const profilePhotoForm = document.getElementById('profilePhotoForm'); if (profilePhotoForm) { profilePhotoForm.removeEventListener('submit', handlePhotoUploadSubmit); profilePhotoForm.addEventListener('submit', handlePhotoUploadSubmit); const profilePhotoInput = document.getElementById('profilePhotoFile'); if (profilePhotoInput) { profilePhotoInput.addEventListener('change', (event) => { const photoPreview = document.getElementById('profilePhotoPreview'); const fileErrorMessage = document.getElementById('profile-file-error-message'); const file = event.target.files[0]; const user = getUserById(getLoggedInUserId()); const defaultPhoto = user?.photoUrl || getDefaultProfilePhoto(user?.profile); if (fileErrorMessage) fileErrorMessage.textContent = ''; if (photoPreview && file && file.type.startsWith('image/')) { if (file.size > MAX_FILE_SIZE_BYTES) { if (fileErrorMessage) fileErrorMessage.textContent = `Imagem maior que ${MAX_FILE_SIZE_MB}MB`; event.target.value = ''; photoPreview.src = defaultPhoto; return; } const reader = new FileReader(); reader.onload = () => photoPreview.src = reader.result; reader.onerror = () => { if (fileErrorMessage) fileErrorMessage.textContent = 'Erro ao ler imagem.'; }; reader.readAsDataURL(file); } else if (photoPreview && file && !file.type.startsWith('image/')) { if (fileErrorMessage) fileErrorMessage.textContent = 'Formato de arquivo inválido.'; event.target.value = ''; photoPreview.src = defaultPhoto; } else if (photoPreview) { photoPreview.src = defaultPhoto; } }); } } const recipesTableBody = document.getElementById('recipesTableBody'); if (recipesTableBody) { recipesTableBody.removeEventListener('click', handleRecipesTableActions); recipesTableBody.addEventListener('click', handleRecipesTableActions); } const availabilityForm = document.getElementById('availabilityForm'); if (availabilityForm) { availabilityForm.removeEventListener('submit', handleAdminAvailabilityFormSubmit); availabilityForm.addEventListener('submit', handleAdminAvailabilityFormSubmit); } const bookingForm = document.getElementById('bookingForm'); if (bookingForm) { bookingForm.removeEventListener('submit', handleBookingFormSubmit); bookingForm.addEventListener('submit', handleBookingFormSubmit); } const petsTableBody = document.getElementById('petsTableBody'); if (petsTableBody) { petsTableBody.removeEventListener('click', handlePetTableActions); petsTableBody.addEventListener('click', handlePetTableActions); } const userEditForm = document.getElementById('editUserForm'); if (userEditForm) { userEditForm.removeEventListener('submit', handleUserEditFormSubmit); userEditForm.addEventListener('submit', handleUserEditFormSubmit); } }

function renderPetsCards() { const container = document.getElementById('petsCardContainer'); const loadingPlaceholder = document.getElementById('petsLoadingPlaceholder'); const tableContainer = document.getElementById('petsTableContainer'); if (!container) return; const userId = getLoggedInUserId(); const userProfile = getUserProfile(); if (userProfile === 'administrator' || userProfile === 'veterinarian') { container.style.display = 'none'; return; } if (tableContainer) tableContainer.style.display = 'none'; container.style.display = 'flex'; container.className = 'row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 client-only'; if (!userId) { container.innerHTML = '<div class="col-12"><div class="alert alert-danger">Erro: Usuário não identificado. Faça login novamente.</div></div>'; if (loadingPlaceholder) loadingPlaceholder.style.display = 'none'; return; } if (loadingPlaceholder) loadingPlaceholder.style.display = 'flex'; container.innerHTML = ''; const userPets = getAllPetsByUser(userId); if (loadingPlaceholder) loadingPlaceholder.style.display = 'none'; if (!userPets || userPets.length === 0) { let message = "Você ainda não cadastrou nenhum pet."; const emptyStateWrapper = document.createElement('div'); emptyStateWrapper.className = 'col-12 text-center mt-4'; emptyStateWrapper.innerHTML = `<img src="img/empty_state_pets.svg" width="150" class="mb-3 opacity-50" alt="Nenhum pet"><p class="text-muted fs-5">${message}</p><button type="button" class="btn btn-success mt-2 client-only admin-only" data-bs-toggle="modal" data-bs-target="#petModal" id="addPetButtonEmpty"><i class="bi bi-plus-circle-fill me-1"></i> Adicionar Pet</button>`; container.appendChild(emptyStateWrapper); checkLoginAndSetupPage(); } else { userPets.forEach(pet => { if (!pet) return; const age = calculateAge(pet.birthDate); const photoSource = pet.photoUrl || DEFAULT_PET_PHOTO; const cardElement = document.createElement('div'); cardElement.className = 'col d-flex align-items-stretch'; let notesHtml = ''; if (pet.notes) { const shortNotes = pet.notes.substring(0, 80); notesHtml = `<p class="mt-2 mb-0 text-muted fst-italic small" title="${pet.notes}">Observações: ${shortNotes}${pet.notes.length > 80 ? '...' : ''}</p>`; } cardElement.innerHTML = `<div class="card h-100 shadow-sm pet-card w-100"> <img src="${photoSource}" class="card-img-top pet-card-img" alt="Foto de ${pet.name}" onerror="this.onerror=null; this.src='${DEFAULT_PET_PHOTO}';"> <div class="card-body d-flex flex-column"> <h5 class="card-title mb-1">${pet.name}</h5> <p class="card-text text-muted small mb-2">${pet.species} - ${pet.breed}</p> <div class="small mb-3 flex-grow-1"> <dl class="row gx-2 gy-0 mb-1"><dt class="col-auto fw-normal text-muted">Idade:</dt><dd class="col">${age}</dd></dl> <dl class="row gx-2 gy-0 mb-0"><dt class="col-auto fw-normal text-muted">Nasc.:</dt><dd class="col">${pet.birthDate ? new Date(pet.birthDate + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'Não informada'}</dd></dl> ${notesHtml} </div> <div class="mt-auto d-flex justify-content-end gap-2 border-top pt-2 client-only admin-only"> <button type="button" class="btn btn-sm btn-outline-primary edit-pet-btn" data-pet-id="${pet.id}" title="Editar ${pet.name}"><i class="bi bi-pencil-fill"></i> Editar</button> <button type="button" class="btn btn-sm btn-outline-danger delete-pet-btn" data-pet-id="${pet.id}" data-pet-name="${pet.name}" title="Excluir ${pet.name}"><i class="bi bi-trash-fill"></i> Excluir</button> </div> </div> </div>`; container.appendChild(cardElement); }); checkLoginAndSetupPage(); } }

function handlePetCardActions(event) { const button = event.target.closest('button'); if (!button) return; const petId = button.dataset.petId; if (!petId) return; if (button.classList.contains('edit-pet-btn')) { handleEditPetClick(petId); } else if (button.classList.contains('delete-pet-btn')) { handleDeletePetClick(petId, button.dataset.petName); } }
function handlePetTableActions(event) { const button = event.target.closest('button'); if (!button) return; const petId = button.dataset.petId; if (!petId) return; if (button.classList.contains('edit-pet-btn')) { handleEditPetClick(petId); } else if (button.classList.contains('delete-pet-btn')) { handleDeletePetClick(petId, button.dataset.petName); } }
function populateAdminPetOwnerDropdown() { const selectElement = document.getElementById('petOwnerId'); if (!selectElement) return; selectElement.innerHTML = '<option value="" disabled selected>Selecione o tutor...</option>'; const allUsers = getAllUsers().filter(u => u && u.profile === 'client'); allUsers.sort((a, b) => a.name.localeCompare(b.name)); allUsers.forEach(user => { if (!user) return; const option = document.createElement('option'); option.value = user.id; option.textContent = `${user.name} (${user.email})`; selectElement.appendChild(option); }); }
function handleAddPetClick() { clearForm('petForm'); document.getElementById('petId').value = ''; document.getElementById('petModalLabel').textContent = 'Adicionar Novo Pet'; showMessage('modal-form-message', '', '', 0); const ownerField = document.getElementById('petOwnerAdminField'); const userProfile = getUserProfile(); if (userProfile === 'administrator' && ownerField) { ownerField.style.display = 'block'; populateAdminPetOwnerDropdown(); } else if (ownerField) { ownerField.style.display = 'none'; } const saveButton = document.getElementById('savePetButton'); if (saveButton) saveButton.disabled = false; const modalElement = document.getElementById('petModal'); const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleEditPetClick(petId) { const pet = getPetById(petId); if (!pet) { showMessage('pets-message', 'Erro: Pet não encontrado.', 'danger'); return; } clearForm('petForm'); document.getElementById('petId').value = pet.id; document.getElementById('petName').value = pet.name; document.getElementById('petSpecies').value = pet.species; document.getElementById('petBreed').value = pet.breed === 'Não informada' ? '' : pet.breed; document.getElementById('petBirthDate').value = pet.birthDate || ''; document.getElementById('petNotes').value = pet.notes || ''; document.getElementById('petModalLabel').textContent = `Editar Pet: ${pet.name}`; document.getElementById('photoPreview').src = pet.photoUrl || DEFAULT_PET_PHOTO; showMessage('modal-form-message', '', '', 0); document.getElementById('file-error-message').textContent = ''; const ownerField = document.getElementById('petOwnerAdminField'); const ownerSelect = document.getElementById('petOwnerId'); const userProfile = getUserProfile(); if (userProfile === 'administrator' && ownerField && ownerSelect) { ownerField.style.display = 'block'; populateAdminPetOwnerDropdown(); ownerSelect.value = pet.ownerId; } else if (ownerField) { ownerField.style.display = 'none'; } const saveButton = document.getElementById('savePetButton'); if (saveButton) saveButton.disabled = false; const modalElement = document.getElementById('petModal'); const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleDeletePetClick(petId, petName) { document.getElementById('petNameToDelete').textContent = petName || 'este pet'; document.getElementById('confirmDeleteButton').dataset.petIdToDelete = petId; const modalElement = document.getElementById('deleteConfirmModal'); const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleConfirmDelete(event) { const button = event.target; const petIdToDelete = button.dataset.petIdToDelete; const modalElement = document.getElementById('deleteConfirmModal'); const modalInstance = bootstrap.Modal.getInstance(modalElement); const userProfile = getUserProfile(); if (petIdToDelete) { button.disabled = true; const success = deletePet(petIdToDelete); if (success) { showMessage('pets-message', 'Pet excluído com sucesso!', 'success'); if (userProfile === 'administrator' || userProfile === 'veterinarian') { renderPetsTableForAdmin('petsTableBody'); } else { renderPetsCards(); } updateDashboardData(); } else { showMessage('pets-message', 'Erro ao excluir o pet. Verifique o armazenamento.', 'danger'); } if (modalInstance) modalInstance.hide(); button.disabled = false; delete button.dataset.petIdToDelete; } else { console.error("ID do pet para exclusão não encontrado no botão!"); showMessage('pets-message', 'Erro interno ao tentar excluir.', 'danger'); if (modalInstance) modalInstance.hide(); } }
function handlePetModalClose(event) { clearForm('petForm'); const saveButton = document.getElementById('savePetButton'); if (saveButton) { saveButton.disabled = false; saveButton.innerHTML = 'Salvar Pet'; } const modalTitle = document.getElementById('petModalLabel'); if (modalTitle) modalTitle.textContent = 'Adicionar Novo Pet'; }
function handlePhotoFileChange(event) { const fileInput = event.target; const photoPreview = document.getElementById('photoPreview'); const fileErrorMessage = document.getElementById('file-error-message'); fileErrorMessage.textContent = ''; const file = fileInput.files[0]; const petId = document.getElementById('petId').value; const currentPet = petId ? getPetById(petId) : null; const defaultPhoto = currentPet ? (currentPet.photoUrl || DEFAULT_PET_PHOTO) : DEFAULT_PET_PHOTO; if (file) { if (!file.type.startsWith('image/')) { fileErrorMessage.textContent = 'Formato inválido.'; fileInput.value = ''; photoPreview.src = defaultPhoto; return; } if (file.size > MAX_FILE_SIZE_BYTES) { fileErrorMessage.textContent = `Arquivo grande (Máx ${MAX_FILE_SIZE_MB}MB).`; fileInput.value = ''; photoPreview.src = defaultPhoto; return; } const reader = new FileReader(); reader.onload = (e) => { photoPreview.src = e.target.result; }; reader.onerror = () => { fileErrorMessage.textContent = 'Erro ao ler arquivo.'; photoPreview.src = defaultPhoto; }; reader.readAsDataURL(file); } else { photoPreview.src = defaultPhoto; } }
function handlePetFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const saveButton = form.querySelector('#savePetButton'); const fileInput = form.querySelector('#petPhotoFile'); const fileErrorMessage = document.getElementById('file-error-message'); const modalMessageElement = document.getElementById('modal-form-message'); const userProfile = getUserProfile(); const ownerSelect = form.querySelector('#petOwnerId'); form.classList.add('was-validated'); ownerSelect?.classList.remove('is-invalid'); if (userProfile === 'administrator' && ownerSelect.style.display !== 'none' && !ownerSelect.value) { ownerSelect.classList.add('is-invalid'); if (modalMessageElement) showMessage(modalMessageElement.id, 'Selecione o tutor do pet.', 'warning'); return; } if (!form.checkValidity()) { const firstInvalid = form.querySelector(':invalid'); if (firstInvalid) firstInvalid.focus(); return; } const petId = form.querySelector('#petId').value; const currentPet = petId ? getPetById(petId) : null; const loggedInUserId = getLoggedInUserId(); if (!loggedInUserId) { showMessage(modalMessageElement.id, 'Erro: Usuário não logado.', 'danger'); return; } let ownerIdForPet = loggedInUserId; if (userProfile === 'administrator' && ownerSelect.value) { ownerIdForPet = ownerSelect.value; } const petData = { id: petId ? Number(petId) : null, ownerId: ownerIdForPet, name: form.querySelector('#petName').value, species: form.querySelector('#petSpecies').value, breed: form.querySelector('#petBreed').value, birthDate: form.querySelector('#petBirthDate').value, notes: form.querySelector('#petNotes').value, photoUrl: currentPet ? currentPet.photoUrl : DEFAULT_PET_PHOTO }; saveButton.disabled = true; saveButton.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Salvando...`; fileErrorMessage.textContent = ''; showMessage(modalMessageElement.id, '', '', 0); const executeSave = (finalPetData) => { let success = false; let message = ''; let savedPet = null; try { if (finalPetData.id) { savedPet = updatePet(finalPetData); success = !!savedPet; message = success ? 'Pet atualizado com sucesso!' : 'Erro ao atualizar o pet.'; } else { savedPet = addPet(finalPetData); success = !!savedPet; message = success ? 'Pet adicionado com sucesso!' : 'Erro ao adicionar o pet.'; } if (!success && message === '') { message = 'Falha ao salvar no armazenamento.'; } } catch (error) { console.error("Erro ao salvar pet:", error); success = false; message = 'Erro inesperado ao salvar.'; } saveButton.disabled = false; saveButton.innerHTML = 'Salvar Pet'; if (success) { const petModalElement = document.getElementById('petModal'); const petModalInstance = bootstrap.Modal.getInstance(petModalElement); if (petModalInstance) petModalInstance.hide(); showMessage('pets-message', message, 'success'); if (userProfile === 'administrator' || userProfile === 'veterinarian') { renderPetsTableForAdmin('petsTableBody'); } else { renderPetsCards(); } updateDashboardData(); } else { showMessage(modalMessageElement.id, message, 'danger'); } }; const file = fileInput.files[0]; if (file && file.type.startsWith('image/') && file.size <= MAX_FILE_SIZE_BYTES) { const reader = new FileReader(); reader.onload = (e) => { petData.photoUrl = e.target.result; executeSave(petData); }; reader.onerror = () => { showMessage(modalMessageElement.id, 'Erro ao processar a imagem selecionada.', 'danger'); saveButton.disabled = false; saveButton.innerHTML = 'Salvar Pet'; }; reader.readAsDataURL(file); } else if (file) { fileErrorMessage.textContent = 'Arquivo de imagem inválido ou muito grande.'; fileInput.classList.add('is-invalid'); saveButton.disabled = false; saveButton.innerHTML = 'Salvar Pet'; } else { executeSave(petData); } }
function renderPetsTableForAdmin(tableBodyId) { const tableBody = document.getElementById(tableBodyId); const loadingRow = document.getElementById('petsTableLoadingPlaceholder'); const container = document.getElementById('petsTableContainer'); const cardContainer = document.getElementById('petsCardContainer'); if (!tableBody || !container) return; container.style.display = 'block'; if (cardContainer) cardContainer.style.display = 'none'; if (loadingRow) tableBody.style.display = 'table-row-group'; tableBody.innerHTML = ''; if (loadingRow) tableBody.appendChild(loadingRow); const allPets = getAllPetsByUser(getLoggedInUserId()); const allUsers = getAllUsers(); if (loadingRow) loadingRow.style.display = 'table-row'; if (!allPets || allPets.length === 0) { if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted py-4">Nenhum pet cadastrado no sistema.</td></tr>'; return; } allPets.sort((a, b) => a.name.localeCompare(b.name)); if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = ''; allPets.forEach(pet => { if (!pet) return; const owner = allUsers.find(u => u && u.id === pet.ownerId); const ownerName = owner ? owner.name : 'Tutor Desconhecido'; const age = calculateAge(pet.birthDate); const row = tableBody.insertRow(); const cellPhoto = row.insertCell(); cellPhoto.style.width = '60px'; const img = document.createElement('img'); img.src = pet.photoUrl || DEFAULT_PET_PHOTO; img.alt = `Foto de ${pet.name}`; img.className = 'img-thumbnail rounded-circle pet-list-thumbnail'; img.onerror = () => { img.src = DEFAULT_PET_PHOTO; }; cellPhoto.appendChild(img); row.insertCell().textContent = pet.name; row.insertCell().textContent = pet.species; row.insertCell().textContent = pet.breed || 'N/I'; row.insertCell().textContent = ownerName; row.insertCell().textContent = age; const actionsCell = row.insertCell(); actionsCell.className = 'text-end'; const editButton = document.createElement('button'); editButton.type = 'button'; editButton.className = 'btn btn-sm btn-outline-primary edit-pet-btn me-1'; editButton.dataset.petId = pet.id; editButton.innerHTML = '<i class="bi bi-pencil-fill"></i>'; editButton.title = `Editar ${pet.name}`; const deleteButton = document.createElement('button'); deleteButton.type = 'button'; deleteButton.className = 'btn btn-sm btn-outline-danger delete-pet-btn'; deleteButton.dataset.petId = pet.id; deleteButton.dataset.petName = pet.name; deleteButton.innerHTML = '<i class="bi bi-trash-fill"></i>'; deleteButton.title = `Excluir ${pet.name}`; actionsCell.appendChild(editButton); actionsCell.appendChild(deleteButton); }); }

function updateDashboardData() { const userId = getLoggedInUserId(); if (!userId) return; const user = getUserById(userId); if (!user) return; const currentPage = window.location.pathname.split('/').pop(); if (currentPage === 'dashboard.html' || currentPage === '') { const userProfile = user.profile; const totalPetsCountElement = document.getElementById('totalPetsCount'); const systemTotalPetsCountElement = document.getElementById('systemTotalPetsCount'); const consultationsCardTitle = document.getElementById('consultationsCardTitle'); const totalConsultationsCountElement = document.getElementById('totalConsultationsCount'); const recipesCardTitle = document.getElementById('recipesCardTitle'); const totalRecipesCountElement = document.getElementById('totalRecipesCount'); const allPets = getAllPets(); const allConsultations = getAllBookedConsultations(); const allRecipes = getAllRecipes(); if (userProfile === 'client') { if (totalPetsCountElement) totalPetsCountElement.textContent = allPets.filter(p => p && p.ownerId === userId).length; } else { if (systemTotalPetsCountElement) systemTotalPetsCountElement.textContent = allPets.length; } let consultationCount = 0; if (userProfile === 'client') { consultationCount = allConsultations.filter(c => c && c.clientId === userId).length; if (consultationsCardTitle) consultationsCardTitle.textContent = "Minhas Consultas Agendadas"; } else if (userProfile === 'veterinarian') { consultationCount = allConsultations.filter(c => c && c.vetId === userId).length; if (consultationsCardTitle) consultationsCardTitle.textContent = "Consultas (Minha Agenda)"; } else { consultationCount = allConsultations.length; if (consultationsCardTitle) consultationsCardTitle.textContent = "Consultas Agendadas (Total)"; } if (totalConsultationsCountElement) totalConsultationsCountElement.textContent = consultationCount; let recipeCount = 0; if (userProfile === 'client') { const clientPetIds = allPets.filter(p => p && p.ownerId === userId).map(p => p.id); recipeCount = allRecipes.filter(r => r && clientPetIds.includes(r.petId)).length; if (recipesCardTitle) recipesCardTitle.textContent = "Minhas Receitas Ativas"; } else if (userProfile === 'veterinarian') { recipeCount = allRecipes.filter(r => r && r.vetId === userId).length; if (recipesCardTitle) recipesCardTitle.textContent = "Receitas Emitidas por Mim"; } else { recipeCount = allRecipes.length; if (recipesCardTitle) recipesCardTitle.textContent = "Receitas Ativas (Total)"; } if (totalRecipesCountElement) totalRecipesCountElement.textContent = recipeCount; if (userProfile === 'veterinarian' || userProfile === 'administrator') { renderDashboardAgenda(userProfile, userId); } } }
function renderDashboardAgenda(profile, userId) {
    const tableBody = document.getElementById('dashboardAgendaTableBody'); if (!tableBody) return; let consultationsToShow = []; const allConsultations = getAllBookedConsultations(); const todayStr = new Date().toISOString().split('T')[0]; const futureConsultations = allConsultations.filter(c => c && c.date >= todayStr); if (profile === 'administrator') { consultationsToShow = futureConsultations; } else if (profile === 'veterinarian') { consultationsToShow = futureConsultations.filter(c => c.vetId === Number(userId)); } consultationsToShow = consultationsToShow.sort((a, b) => a.date.localeCompare(b.date) || (a.time || '').localeCompare(b.time || '')).slice(0, 10); // Sort before slice
    const colCount = profile === 'administrator' ? 6 : 5; if (consultationsToShow.length === 0) { tableBody.innerHTML = `<tr><td colspan="${colCount}" class="text-center text-muted py-4">Nenhuma consulta futura encontrada ${profile === 'veterinarian' ? 'para você' : 'no sistema'}.</td></tr>`; } else { tableBody.innerHTML = ''; const allPetsData = getAllPets(); const allUsersData = getAllUsers(); consultationsToShow.forEach(consultation => { if (!consultation) return; const pet = allPetsData.find(p => p && p.id === consultation.petId); const client = allUsersData.find(u => u && u.id === consultation.clientId); const vet = allUsersData.find(u => u && u.id === consultation.vetId); const row = tableBody.insertRow(); let formattedDate = 'Data Inválida'; try { formattedDate = new Date(consultation.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { console.error("Erro ao formatar data da consulta:", e); } row.insertCell().textContent = formattedDate; row.insertCell().textContent = consultation.time || 'N/A'; row.insertCell().textContent = pet ? pet.name : 'Pet Desconhecido'; row.insertCell().textContent = client ? client.name : 'Tutor Desconhecido'; if (profile === 'administrator') { row.insertCell().textContent = vet ? vet.name : 'Vet. Desconhecido'; } row.insertCell().textContent = consultation.reason; }); }
}

function populateAdminVetDropdown(selectElementId) { const selectElement = document.getElementById(selectElementId); if (!selectElement) return; selectElement.innerHTML = '<option value="" disabled selected>Selecione o(a) Veterinário(a)...</option>'; const veterinarians = getAllVeterinarians(); veterinarians.sort((a, b) => a.name.localeCompare(b.name)); veterinarians.forEach(vet => { if (!vet) return; const option = document.createElement('option'); option.value = vet.id; option.textContent = vet.name; selectElement.appendChild(option); }); }
function renderAdminAvailabilitiesList(listElementId) { const listElement = document.getElementById(listElementId); const loadingElement = document.getElementById('availabilitiesLoading'); if (!listElement) return; if (loadingElement) loadingElement.style.display = 'block'; listElement.innerHTML = ''; const availabilities = getAllAvailabilities(); const users = getAllUsers(); if (loadingElement) loadingElement.style.display = 'none'; if (availabilities.length === 0) { listElement.innerHTML = '<li class="list-group-item text-muted text-center">Nenhuma disponibilidade cadastrada.</li>'; return; } availabilities.sort((a, b) => { const dateComparison = b.date.localeCompare(a.date); if (dateComparison !== 0) return dateComparison; const vetA = users.find(u => u && u.id === a.vetId)?.name || 'Desconhecido'; const vetB = users.find(u => u && u.id === b.vetId)?.name || 'Desconhecido'; return vetA.localeCompare(vetB); }); availabilities.forEach(availability => { if (!availability) return; const vet = users.find(u => u && u.id === availability.vetId); const vetName = vet ? vet.name : `Veterinário ID ${availability.vetId} (não encontrado)`; let formattedDate = 'Data Inválida'; try { formattedDate = new Date(availability.date + 'T00:00:00').toLocaleDateString('pt-BR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' }); } catch (e) { console.error("Erro ao formatar data da disponibilidade:", e); } const listItem = document.createElement('li'); listItem.className = 'list-group-item d-flex justify-content-between align-items-center'; listItem.innerHTML = ` <span> <i class="bi bi-calendar-check text-success me-2"></i> <strong>${formattedDate}</strong> - ${vetName} </span> <button class="btn btn-sm btn-outline-danger delete-availability-btn" data-availability-id="${availability.id}" title="Excluir Disponibilidade"> <i class="bi bi-trash"></i> </button> `; listElement.appendChild(listItem); }); }
function handleAdminAvailabilityFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const dateInput = form.querySelector('#availabilityDateInput'); const vetSelect = form.querySelector('#availabilityVetId'); const messageId = 'availability-form-message'; form.classList.add('was-validated'); if (!form.checkValidity()) { return; } const dateString = dateInput.value; const vetId = vetSelect.value; const result = addAvailability(dateString, vetId); if (result.success) { showMessage(messageId, result.message, 'success'); renderAdminAvailabilitiesList('availabilitiesList'); clearForm(form.id); form.classList.remove('was-validated'); } else { showMessage(messageId, result.message, 'danger'); dateInput.classList.remove('is-invalid'); vetSelect.classList.remove('is-invalid'); form.classList.remove('was-validated'); } }
function handleAdminAvailabilityListClick(event) { const deleteButton = event.target.closest('.delete-availability-btn'); if (deleteButton) { const availabilityId = deleteButton.dataset.availabilityId; if (availabilityId) { if (confirm('Tem certeza que deseja excluir esta disponibilidade?')) { deleteAvailability(availabilityId); } } } }
function renderAllBookedAppointments(tableBodyId) { const tableBody = document.getElementById(tableBodyId); const loadingRow = document.getElementById('loadingAllBookings'); if (!tableBody) return; tableBody.innerHTML = ''; if (loadingRow) tableBody.appendChild(loadingRow); const bookedConsultations = getAllBookedConsultations(); const pets = getAllPets(); const users = getAllUsers(); if (loadingRow) loadingRow.style.display = 'table-row'; if (bookedConsultations.length === 0) { if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted py-4">Nenhuma consulta agendada no sistema.</td></tr>'; return; } bookedConsultations.sort((a, b) => b.date.localeCompare(a.date) || (b.time || '').localeCompare(a.time || '')); tableBody.innerHTML = ''; bookedConsultations.forEach(booking => { if (!booking) return; const pet = pets.find(p => p && p.id === booking.petId); const vet = users.find(u => u && u.id === booking.vetId); const client = users.find(u => u && u.id === booking.clientId); const petName = pet ? pet.name : `Pet ID ${booking.petId}`; const tutorName = client ? client.name : `Tutor ID ${booking.clientId}`; const vetName = vet ? vet.name : `Vet ID ${booking.vetId}`; let formattedDate = 'Inválida'; try { formattedDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } let statusBadgeClass = 'bg-secondary'; if (booking.status === 'Agendada') statusBadgeClass = 'bg-info text-dark'; else if (booking.status === 'Compareceu') statusBadgeClass = 'bg-success'; else if (booking.status === 'Não Compareceu') statusBadgeClass = 'bg-danger'; const row = tableBody.insertRow(); row.innerHTML = ` <td>${formattedDate}</td> <td>${booking.time || 'N/A'}</td> <td>${petName}</td> <td>${tutorName}</td> <td>${vetName}</td> <td>${booking.reason}</td> <td><span class="badge ${statusBadgeClass}">${booking.status}</span></td> `; }); }
function populateClientPetDropdown(selectElementId, clientId) { const selectElement = document.getElementById(selectElementId); if (!selectElement) return false; selectElement.innerHTML = '<option value="" disabled selected>Selecione seu pet...</option>'; const clientPets = getAllPetsByUser(clientId); if (clientPets.length === 0) { selectElement.disabled = true; selectElement.innerHTML = '<option value="" disabled selected>Nenhum pet cadastrado</option>'; showMessage('bookingForm-message', 'Você precisa cadastrar um pet antes de agendar consultas.', 'warning', 0); return false; } clientPets.sort((a, b) => a.name.localeCompare(b.name)); clientPets.forEach(pet => { if (!pet) return; const option = document.createElement('option'); option.value = pet.id; option.textContent = pet.name; selectElement.appendChild(option); }); selectElement.disabled = true; return true; }
function getAvailableVetsForDate(dateString) { const allAvailabilities = getAllAvailabilities(); const availabilitiesOnDate = allAvailabilities.filter(a => a && a.date === dateString); if (availabilitiesOnDate.length === 0) { return []; } const allVets = getAllVeterinarians(); const availableVetIds = [...new Set(availabilitiesOnDate.map(availability => availability.vetId))]; const availableVets = allVets.filter(vet => vet && availableVetIds.includes(vet.id)); availableVets.sort((a, b) => a.name.localeCompare(b.name)); return availableVets; }
function renderClientBookedAppointments(listElementId, clientId) { const listElement = document.getElementById(listElementId); if (!listElement) return; listElement.innerHTML = '<li class="list-group-item text-center text-muted">Carregando suas consultas...</li>'; const clientBookings = getClientBookedConsultations(clientId); const allPets = getAllPets(); const allVets = getAllVeterinarians(); const allRecipes = getAllRecipes(); if (clientBookings.length === 0) { listElement.innerHTML = '<li class="list-group-item text-muted text-center">Você ainda não possui consultas agendadas.</li>'; return; } clientBookings.sort((a, b) => b.date.localeCompare(a.date) || (b.time || '').localeCompare(a.time || '')); listElement.innerHTML = ''; clientBookings.forEach(booking => { if (!booking) return; const pet = allPets.find(p => p && p.id === booking.petId); const vet = allVets.find(v => v && v.id === booking.vetId); const petName = pet ? pet.name : `Pet ID ${booking.petId}`; const vetName = vet ? vet.name : `Vet ID ${booking.vetId}`; let formattedDate = 'Inválida'; try { formattedDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' }); } catch (e) { } const listItem = document.createElement('li'); listItem.className = 'list-group-item'; let diagnosisHtml = ''; if (booking.diagnosis) { const shortDiagnosis = booking.diagnosis.substring(0, 150).replace(/\n/g, '<br>'); diagnosisHtml = `<div class="small ps-4 mt-1"><strong>Diagnóstico:</strong> ${shortDiagnosis}${booking.diagnosis.length > 150 ? '...' : ''}</div>`; } else { diagnosisHtml = `<div class="small text-muted ps-4 mt-1 fst-italic">Diagnóstico ainda não registrado.</div>`; } let recipeButtonHtml = ''; if (booking.recipeId) { const recipe = allRecipes.find(r => r && r.id === booking.recipeId); if (recipe) { recipeButtonHtml = ` <button type="button" class="btn btn-sm btn-outline-secondary view-recipe-btn ms-2 float-end" data-recipe-id="${booking.recipeId}" data-consultation-id="${booking.id}" title="Visualizar Receita Médica"> <i class="bi bi-receipt"></i> Ver Receita </button> `; } } listItem.innerHTML = ` <div> <i class="bi bi-calendar-check-fill text-success me-2"></i> <strong>${formattedDate}</strong> (Status: ${booking.status}) ${recipeButtonHtml} </div> <div class="small text-muted ps-4"> Pet: ${petName} | Veterinário(a): ${vetName} | Motivo: ${booking.reason} </div> ${diagnosisHtml} `; listElement.appendChild(listItem); }); }
function initializeFlatpickrCalendar(calendarElementId) { const calendarElement = document.getElementById(calendarElementId); if (!calendarElement || typeof flatpickr !== 'function') { if (calendarElement) calendarElement.innerHTML = '<p class="text-danger">Erro ao carregar o componente de calendário.</p>'; return; } calendarElement.innerHTML = ''; const allAvailabilities = getAllAvailabilities(); const availableDates = [...new Set(allAvailabilities.map(a => a.date))]; const options = { locale: "pt", inline: true, dateFormat: "Y-m-d", minDate: "today", enable: availableDates, onChange: function (selectedDates, dateStr, instance) { const displaySelectedDateElement = document.getElementById('displaySelectedBookingDate'); const hiddenDateInputElement = document.getElementById('selectedBookingDateHidden'); const vetSelectElement = document.getElementById('bookingVetId'); const petSelectElement = document.getElementById('bookingPetId'); const dateRequiredFeedback = document.getElementById('date-required-feedback'); if (vetSelectElement) { vetSelectElement.innerHTML = '<option value="" disabled selected>Selecione a data...</option>'; vetSelectElement.disabled = true; vetSelectElement.classList.remove('is-invalid'); } if (petSelectElement) { petSelectElement.selectedIndex = 0; petSelectElement.disabled = true; petSelectElement.classList.remove('is-invalid'); } if (hiddenDateInputElement) hiddenDateInputElement.value = ''; if (displaySelectedDateElement) displaySelectedDateElement.textContent = 'Nenhuma'; if (dateRequiredFeedback) dateRequiredFeedback.style.display = 'none'; showMessage('bookingForm-message', '', '', 0); if (dateStr) { if (displaySelectedDateElement) { try { const dateObject = instance.parseDate(dateStr, "Y-m-d"); displaySelectedDateElement.textContent = dateObject.toLocaleDateString('pt-BR', { dateStyle: 'full', timeZone: 'UTC' }); } catch (e) { displaySelectedDateElement.textContent = dateStr; } } if (hiddenDateInputElement) hiddenDateInputElement.value = dateStr; const availableVets = getAvailableVetsForDate(dateStr); if (availableVets.length > 0 && vetSelectElement) { vetSelectElement.innerHTML = '<option value="" disabled selected>Selecione o(a) Veterinário(a)...</option>'; availableVets.forEach(vet => { if (!vet) return; const option = document.createElement('option'); option.value = vet.id; option.textContent = vet.name; vetSelectElement.appendChild(option); }); vetSelectElement.disabled = false; } else if (vetSelectElement) { vetSelectElement.innerHTML = '<option value="" disabled selected>Nenhum veterinário disponível</option>'; vetSelectElement.disabled = true; } if (petSelectElement && petSelectElement.options.length > 1) { petSelectElement.disabled = false; } } else { if (vetSelectElement) vetSelectElement.disabled = true; if (petSelectElement) petSelectElement.disabled = true; } checkBookingButtonState(); } }; try { clientFlatpickrInstance = flatpickr(calendarElement, options); console.log("Calendário Flatpickr inicializado com sucesso."); } catch (error) { console.error("Erro ao inicializar Flatpickr:", error); if (calendarElement) calendarElement.innerHTML = '<p class="text-danger">Falha ao carregar calendário.</p>'; } }
function checkBookingButtonState() { const hiddenDateInput = document.getElementById('selectedBookingDateHidden'); const vetSelect = document.getElementById('bookingVetId'); const petSelect = document.getElementById('bookingPetId'); const bookButton = document.getElementById('bookAppointmentButton'); if (!hiddenDateInput || !vetSelect || !petSelect || !bookButton) { if (bookButton) bookButton.disabled = true; return; } const isDateSelected = hiddenDateInput.value; const isVetSelected = vetSelect.value; const isPetSelected = petSelect.value; const isEnabled = isDateSelected && isVetSelected && isPetSelected; bookButton.disabled = !isEnabled; }
function handleBookingFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const messageId = 'bookingForm-message'; const hiddenDateInput = document.getElementById('selectedBookingDateHidden'); const dateRequiredFeedback = document.getElementById('date-required-feedback'); let selectedDate = hiddenDateInput ? hiddenDateInput.value : null; if (!selectedDate) { if (dateRequiredFeedback) dateRequiredFeedback.style.display = 'block'; showMessage(messageId, 'Por favor, selecione uma data no calendário.', 'warning'); return; } else { if (dateRequiredFeedback) dateRequiredFeedback.style.display = 'none'; } form.classList.add('was-validated'); if (!form.checkValidity()) { return; } const clientId = getLoggedInUserId(); if (!clientId) { showMessage(messageId, 'Erro: Usuário não logado. Faça login novamente.', 'danger'); return; } const bookingDetails = { date: hiddenDateInput.value, petId: form.querySelector('#bookingPetId').value, vetId: form.querySelector('#bookingVetId').value, reason: form.querySelector('#bookingReason').value, clientId: clientId }; const result = bookConsultation(bookingDetails); if (result.success) { showMessage(messageId, result.message, 'success'); renderClientBookedAppointments('clientBookedAppointmentsList', clientId); const adminBookingsTable = document.getElementById('bookedConsultationsTable'); if (adminBookingsTable && window.getComputedStyle(adminBookingsTable.closest('.card') || adminBookingsTable).display !== 'none') { renderAllBookedAppointments('bookedConsultationsTable'); } const vetBookingsTable = document.getElementById('vetBookedConsultationsTable'); if (vetBookingsTable && window.getComputedStyle(vetBookingsTable.closest('.vet-only') || vetBookingsTable).display !== 'none') { const currentVetId = getUserProfile() === 'veterinarian' ? getLoggedInUserId() : null; if (currentVetId) renderVetConsultationsTable('vetBookedConsultationsTable', currentVetId); } clearForm(form.id); form.classList.remove('was-validated'); } else { showMessage(messageId, result.message || 'Erro desconhecido ao agendar.', 'danger'); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const uniqueAvailableDates = [...new Set(getAllAvailabilities().map(a => a.date))]; clientFlatpickrInstance.set('enable', uniqueAvailableDates); } } }
function handleClientConsultationActions(event) { const viewRecipeButton = event.target.closest('.view-recipe-btn'); if (viewRecipeButton) { const recipeId = viewRecipeButton.dataset.recipeId; const consultationId = viewRecipeButton.dataset.consultationId; if (recipeId && consultationId) { handleOpenViewRecipeModal(recipeId, consultationId); } else { showMessage('consultations-message', 'Erro: Informações da receita ou consulta ausentes.', 'warning'); console.error("IDs ausentes:", { recipeId, consultationId }); } } }
function handleVetConsultationActions(event) { console.log("[handleVetConsultationActions] Evento recebido:", event.type, "Target:", event.target); const target = event.target; if (target.classList.contains('vet-status-select')) { const consultationId = target.dataset.consultationId; const newStatus = target.value; console.log(`[handleVetConsultationActions] Status alterado para ${newStatus} na consulta ${consultationId}`); const result = updateConsultationStatus(consultationId, newStatus); const messageAreaId = 'vet-consultations-message'; if (result.success) { showMessage(messageAreaId, result.message, 'success'); target.className = 'form-select form-select-sm vet-status-select'; let statusBgClasses = ['bg-light', 'text-dark']; if (newStatus === 'Agendada') statusBgClasses = ['bg-info-subtle', 'text-dark']; else if (newStatus === 'Compareceu') statusBgClasses = ['bg-success-subtle', 'text-dark']; else if (newStatus === 'Não Compareceu') statusBgClasses = ['bg-danger-subtle', 'text-dark']; target.classList.add(...statusBgClasses); const clientAppointmentsList = document.getElementById('clientBookedAppointmentsList'); if (clientAppointmentsList) { const booking = getBookedConsultationById(consultationId); const ownerId = booking ? booking.clientId : null; if (ownerId) { renderClientBookedAppointments('clientBookedAppointmentsList', ownerId); } else { console.warn(`[handleVetConsultationActions] ClientId não encontrado para consulta ${consultationId} ao atualizar status.`); } } const adminBookingsTable = document.getElementById('bookedConsultationsTable'); if (adminBookingsTable && window.getComputedStyle(adminBookingsTable.closest('.card') || adminBookingsTable).display !== 'none') { renderAllBookedAppointments('bookedConsultationsTable'); } } else { showMessage(messageAreaId, result.message, 'danger'); const booking = getBookedConsultationById(consultationId); if (booking) target.value = booking.status; } } const diagnosisButton = target.closest('.vet-diagnosis-btn'); if (diagnosisButton) { const consultationId = diagnosisButton.dataset.consultationId; console.log(`[handleVetConsultationActions] Botão Diagnóstico clicado para consulta ${consultationId}`); handleOpenDiagnosisModal(consultationId); } const recipeButton = target.closest('.vet-recipe-btn'); if (recipeButton) { const consultationId = recipeButton.dataset.consultationId; console.log(`[handleVetConsultationActions] Botão Receita clicado para consulta ${consultationId}`); handleOpenRecipeModal(consultationId); } }
function handleOpenDiagnosisModal(consultationId) { const booking = getBookedConsultationById(consultationId); if (!booking) { showMessage('vet-consultations-message', 'Consulta não encontrada para abrir diagnóstico.', 'danger'); return; } const modalElement = document.getElementById('diagnosisModal'); const modalTitle = document.getElementById('diagnosisModalLabel'); const consultationInfo = document.getElementById('diagnosisModalConsultationInfo'); const diagnosisTextArea = document.getElementById('diagnosisText'); const hiddenConsultationIdInput = document.getElementById('diagnosisConsultationId'); if (!modalElement || !modalTitle || !consultationInfo || !diagnosisTextArea || !hiddenConsultationIdInput) { console.error("Elementos do modal de diagnóstico não encontrados."); return; } clearForm('diagnosisForm'); diagnosisTextArea.classList.remove('is-invalid', 'is-valid'); showMessage('diagnosisModal-message', ''); const pet = getPetById(booking.petId); const petName = pet ? pet.name : 'Desconhecido'; let formattedDate = booking.date; try { formattedDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } modalTitle.textContent = `Registrar/Editar Diagnóstico (${formattedDate})`; consultationInfo.textContent = `Pet: ${petName} | Motivo: ${booking.reason}`; diagnosisTextArea.value = booking.diagnosis || ''; hiddenConsultationIdInput.value = consultationId; const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleSaveDiagnosis(event) { event.preventDefault(); const form = event.target; const consultationIdInput = form.querySelector('#diagnosisConsultationId'); const consultationId = consultationIdInput ? consultationIdInput.value : null; const diagnosisText = form.querySelector('#diagnosisText').value; const modalMessageElement = document.getElementById('diagnosisModal-message'); form.classList.add('was-validated'); if (!form.checkValidity()) { return; } if (!consultationId || isNaN(Number(consultationId))) { showMessage(modalMessageElement.id, 'Erro: ID da consulta inválido ou não encontrado no formulário.', 'danger'); console.error("[handleSaveDiagnosis] ID da consulta inválido:", consultationId); return; } const bookingExists = getBookedConsultationById(consultationId); if (!bookingExists) { showMessage(modalMessageElement.id, 'Erro: Consulta não encontrada na base de dados para salvar diagnóstico.', 'danger'); console.error("[handleSaveDiagnosis] Consulta não encontrada no DB:", consultationId); return; } const result = updateConsultationDiagnosis(consultationId, diagnosisText.trim()); const generalMessageAreaId = 'vet-consultations-message'; if (result.success) { showMessage(generalMessageAreaId, result.message, 'success'); const modalElement = document.getElementById('diagnosisModal'); const modalInstance = bootstrap.Modal.getInstance(modalElement); if (modalInstance) modalInstance.hide(); const vetTable = document.getElementById('vetBookedConsultationsTable'); if (vetTable) { const button = vetTable.querySelector(`.vet-diagnosis-btn[data-consultation-id="${consultationId}"]`); if (button) { button.innerHTML = `<i class="bi bi-pencil-square"></i> ${diagnosisText.trim() ? 'Editar' : 'Add'}`; button.title = diagnosisText.trim() ? 'Editar Diagnóstico' : 'Adicionar Diagnóstico'; } } const clientList = document.getElementById('clientBookedAppointmentsList'); if (clientList && typeof renderClientBookedAppointments === 'function') { const ownerId = bookingExists.clientId; if (ownerId) { renderClientBookedAppointments('clientBookedAppointmentsList', ownerId); } else { console.warn(`[handleSaveDiagnosis] Consulta ${consultationId} não possui um clientId válido para atualizar a lista do cliente.`); } } else { console.warn("[handleSaveDiagnosis] Elemento clientBookedAppointmentsList ou função renderClientBookedAppointments não encontrados."); } } else { showMessage(modalMessageElement.id, result.message || 'Erro ao salvar diagnóstico.', 'danger'); } }
function renderVetConsultationsTable(tableBodyId, vetId) { console.log(`[renderVetConsultationsTable] Iniciando para vetId: ${vetId}`); const tableBody = document.getElementById(tableBodyId); const loadingRow = document.getElementById('loadingVetBookings'); if (!tableBody) { console.error(`[renderVetConsultationsTable] Elemento da tabela ${tableBodyId} não encontrado.`); return; } tableBody.innerHTML = ''; if (loadingRow) { loadingRow.style.display = 'table-row'; tableBody.appendChild(loadingRow); console.log("[renderVetConsultationsTable] Linha de loading exibida."); } const vetConsultations = getAllBookedConsultations().filter(c => c && c.vetId === Number(vetId)); console.log(`[renderVetConsultationsTable] Encontradas ${vetConsultations.length} consultas para o vet.`); const allPets = getAllPets(); const allUsers = getAllUsers(); if (vetConsultations.length === 0) { if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted py-4">Nenhuma consulta agendada para você.</td></tr>'; console.log("[renderVetConsultationsTable] Nenhuma consulta encontrada, exibindo mensagem."); return; } vetConsultations.sort((a, b) => b.date.localeCompare(a.date) || (b.time || '').localeCompare(a.time || '')); if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = ''; vetConsultations.forEach((booking, index) => { if (!booking || typeof booking.id === 'undefined') { console.warn(`[renderVetConsultationsTable] Consulta inválida ou sem ID encontrada no índice ${index}:`, booking); return; } console.log(`[renderVetConsultationsTable] Processando consulta ID: ${booking.id}, Data: ${booking.date}`); const pet = allPets.find(p => p && p.id === booking.petId); const client = allUsers.find(u => u && u.id === booking.clientId); const petName = pet ? pet.name : `Pet ID ${booking.petId}`; const tutorName = client ? client.name : `Tutor ID ${booking.clientId}`; let formattedDate = 'Inválida'; try { formattedDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } const row = tableBody.insertRow(); row.insertCell().textContent = formattedDate; row.insertCell().textContent = booking.time || 'N/A'; row.insertCell().textContent = petName; row.insertCell().textContent = tutorName; row.insertCell().textContent = booking.reason; const cellStatus = row.insertCell(); const statusOptions = ['Agendada', 'Compareceu', 'Não Compareceu']; const statusSelect = document.createElement('select'); statusSelect.className = 'form-select form-select-sm vet-status-select'; statusSelect.dataset.consultationId = booking.id; statusOptions.forEach(status => { const option = document.createElement('option'); option.value = status; option.textContent = status; if (status === booking.status) { option.selected = true; } statusSelect.appendChild(option); }); let statusBgClasses = ['bg-light', 'text-dark']; if (booking.status === 'Agendada') statusBgClasses = ['bg-info-subtle', 'text-dark']; else if (booking.status === 'Compareceu') statusBgClasses = ['bg-success-subtle', 'text-dark']; else if (booking.status === 'Não Compareceu') statusBgClasses = ['bg-danger-subtle', 'text-dark']; statusSelect.classList.add(...statusBgClasses); cellStatus.appendChild(statusSelect); console.log(`[renderVetConsultationsTable] Select de status anexado para consulta ${booking.id}`); const cellActions = row.insertCell(); cellActions.style.minWidth = '170px'; const diagnosisButton = document.createElement('button'); diagnosisButton.type = 'button'; diagnosisButton.className = 'btn btn-sm btn-outline-primary vet-diagnosis-btn me-1'; diagnosisButton.dataset.consultationId = booking.id; diagnosisButton.innerHTML = `<i class="bi bi-pencil-square"></i> ${booking.diagnosis ? 'Editar' : 'Add'}`; diagnosisButton.title = booking.diagnosis ? 'Editar Diagnóstico' : 'Adicionar Diagnóstico'; cellActions.appendChild(diagnosisButton); console.log(`[renderVetConsultationsTable] Botão de diagnóstico anexado para consulta ${booking.id}`); const recipeButton = document.createElement('button'); recipeButton.type = 'button'; recipeButton.className = 'btn btn-sm btn-outline-success vet-recipe-btn'; recipeButton.dataset.consultationId = booking.id; recipeButton.innerHTML = `<i class="bi bi-receipt"></i> ${booking.recipeId ? 'Editar' : 'Criar'}`; recipeButton.title = booking.recipeId ? 'Editar Receita Médica' : 'Criar Receita Médica'; cellActions.appendChild(recipeButton); console.log(`[renderVetConsultationsTable] Botão de receita anexado para consulta ${booking.id}`); }); console.log(`[renderVetConsultationsTable] Renderização concluída com ${vetConsultations.length} consultas.`); }
function handleOpenRecipeModal(consultationId) { const booking = getBookedConsultationById(consultationId); if (!booking) { showMessage('vet-consultations-message', 'Consulta não encontrada para criar/editar receita.', 'danger'); return; } const existingRecipe = booking.recipeId ? getRecipeById(booking.recipeId) : null; const modalElement = document.getElementById('recipeModal'); const modalTitle = document.getElementById('recipeModalLabel'); const consultationInfo = document.getElementById('recipeModalConsultationInfo'); const hiddenConsultationId = document.getElementById('recipeConsultationId'); const hiddenRecipeId = document.getElementById('existingRecipeId'); const medicationInput = document.getElementById('recipeMedication'); const dosageInput = document.getElementById('recipeDosage'); const instructionsInput = document.getElementById('recipeInstructions'); if (!modalElement || !hiddenConsultationId || !hiddenRecipeId || !medicationInput || !dosageInput || !instructionsInput || !modalTitle || !consultationInfo) { console.error("Elementos do modal de receita não encontrados."); return; } clearForm('recipeForm'); hiddenConsultationId.value = consultationId; const pet = getPetById(booking.petId); const petName = pet ? pet.name : 'Desconhecido'; let formattedDate = booking.date; try { formattedDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } modalTitle.textContent = existingRecipe ? 'Editar Receita Médica' : 'Criar Nova Receita Médica'; consultationInfo.textContent = `Consulta: ${formattedDate} - Pet: ${petName}`; if (existingRecipe) { hiddenRecipeId.value = existingRecipe.id; medicationInput.value = existingRecipe.medication; dosageInput.value = existingRecipe.dosage; instructionsInput.value = existingRecipe.instructions; } showMessage('recipeModal-message', '', '', 0); medicationInput.classList.remove('is-invalid', 'is-valid'); dosageInput.classList.remove('is-invalid', 'is-valid'); const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleSaveRecipe(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const modalMessageElement = document.getElementById('recipeModal-message'); form.classList.add('was-validated'); if (!form.checkValidity()) { return; } const vetId = getLoggedInUserId(); const consultationId = form.querySelector('#recipeConsultationId').value; if (!vetId || !consultationId) { showMessage(modalMessageElement.id, 'Erro: Informações de Veterinário ou Consulta ausentes.', 'danger'); return; } const recipeDetails = { recipeId: form.querySelector('#existingRecipeId').value || null, consultationId: consultationId, vetId: vetId, medication: form.querySelector('#recipeMedication').value, dosage: form.querySelector('#recipeDosage').value, instructions: form.querySelector('#recipeInstructions').value }; const result = addOrUpdateRecipe(recipeDetails); const generalMessageAreaId = 'vet-consultations-message'; if (result.success) { showMessage(generalMessageAreaId, result.message, 'success'); const modalElement = document.getElementById('recipeModal'); const modalInstance = bootstrap.Modal.getInstance(modalElement); if (modalInstance) modalInstance.hide(); const vetTable = document.getElementById('vetBookedConsultationsTable'); if (vetTable) { const button = vetTable.querySelector(`.vet-recipe-btn[data-consultation-id="${consultationId}"]`); if (button) { const newRecipeId = result.data?.id; button.innerHTML = `<i class="bi bi-receipt"></i> ${newRecipeId ? 'Editar' : 'Criar'}`; button.title = newRecipeId ? 'Editar Receita Médica' : 'Criar Receita Médica'; } } const clientList = document.getElementById('clientBookedAppointmentsList'); if (clientList) { const booking = getBookedConsultationById(consultationId); const ownerId = booking ? booking.clientId : null; if (ownerId) renderClientBookedAppointments('clientBookedAppointmentsList', ownerId); } updateDashboardData(); const recipesTableBody = document.getElementById('recipesTableBody'); if (recipesTableBody) renderRecipesTable('recipesTableBody'); } else { showMessage(modalMessageElement.id, result.message || 'Erro ao salvar receita.', 'danger'); } }
function handleOpenViewRecipeModal(recipeId, consultationId) { const recipe = getRecipeById(recipeId); const booking = getBookedConsultationById(consultationId); const modalElement = document.getElementById('viewRecipeModal'); const modalBody = document.getElementById('viewRecipeModalBodyContent'); if (!modalElement || !modalBody || !recipe || !booking) { const messageAreaId = document.getElementById('recipes-message') ? 'recipes-message' : (document.getElementById('consultations-message') ? 'consultations-message' : 'dashboard-message'); showMessage(messageAreaId, 'Erro ao carregar detalhes da receita.', 'warning'); console.error("Erro ao abrir modal de visualização:", { recipeId, consultationId, recipe, booking, modalElement, modalBody }); return; } modalBody.innerHTML = '<p class="text-center text-muted">Carregando detalhes...</p>'; const pet = getPetById(booking.petId); const vet = getUserById(booking.vetId); const client = getUserById(booking.clientId); const petName = pet ? pet.name : 'Pet Desconhecido'; const vetName = vet ? vet.name : 'Veterinário Desconhecido'; const clientName = client ? client.name : 'Tutor Desconhecido'; let consultationDate = booking.date; try { consultationDate = new Date(booking.date + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } let issuedDate = recipe.dateIssued; try { issuedDate = new Date(recipe.dateIssued + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } modalBody.innerHTML = ` <h5 class="mb-3 text-center text-primary fw-bold">Receituário Médico Veterinário</h5><hr> <div class="row"> <div class="col-md-6"> <p><strong>Paciente:</strong> ${petName} <br> <strong>Espécie:</strong> ${pet?.species || 'N/I'} <br> <strong>Raça:</strong> ${pet?.breed || 'N/I'} </p> </div> <div class="col-md-6"><p><strong>Tutor:</strong> ${clientName}</p></div> </div> <hr> <div class="row"> <div class="col-md-6"> <p><strong>Consulta Referente:</strong> ${consultationDate} <br> <strong>Data de Emissão:</strong> ${issuedDate}</p> </div> <div class="col-md-6"><p><strong>Veterinário(a) Emissor(a):</strong> ${vetName}</p></div> </div> <hr> <p><strong>Uso ${pet?.species ? pet.species.toLowerCase() : 'animal'}</strong></p> <p><strong>1) ${recipe.medication}</strong></p> <p class="ps-3"><em>Dosagem:</em> ${recipe.dosage}</p> ${recipe.instructions ? `<p class="ps-3"><em>Instruções Adicionais:</em> ${recipe.instructions.replace(/\n/g, '<br>')}</p>` : ''} <hr> <p class="text-center small text-muted mt-4">PetCare System v1.37</p> `; const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handlePrintRecipe() { const modalBodyContent = document.getElementById('viewRecipeModalBodyContent'); if (!modalBodyContent) { alert("Erro: Conteúdo da receita não encontrado para impressão."); return; } const printWindow = window.open('', '_blank', 'height=600,width=800'); printWindow.document.write('<html><head><title>Receita PetCare</title>'); printWindow.document.write('<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">'); printWindow.document.write('<style>'); printWindow.document.write('body { padding: 20px; font-family: sans-serif; color: #000 !important; background: #fff !important; }'); printWindow.document.write('hr { margin: 1rem 0; border-top: 1px solid #ccc; } .text-primary { color: #000 !important; }'); printWindow.document.write('strong { font-weight: bold; } .small { font-size: 0.85em; } .text-muted { color: #555 !important; }'); printWindow.document.write('.mt-4 { margin-top: 1.5rem !important; } .text-center { text-align: center !important; }'); printWindow.document.write('.ps-3 { padding-left: 1rem !important; } .fw-bold { font-weight: bold !important; }'); printWindow.document.write('.mb-3 { margin-bottom: 1rem !important; }'); printWindow.document.write('.row::after { content: ""; display: table; clear: both; } .col-md-6 { width: 48%; float: left; padding: 0 1%; }'); printWindow.document.write('@media print { body { font-size: 11pt; } a { text-decoration: none; color: #000; } }'); printWindow.document.write('</style></head><body>'); printWindow.document.write(modalBodyContent.innerHTML); printWindow.document.write('</body></html>'); printWindow.document.close(); printWindow.focus(); setTimeout(() => { printWindow.print(); printWindow.close(); }, 300); }

function renderUsersTable(tableBodyId) { const tableBody = document.getElementById(tableBodyId); const loadingRow = document.getElementById('loadingUsers'); if (!tableBody) return; tableBody.innerHTML = ''; if (loadingRow) tableBody.appendChild(loadingRow); const users = getAllUsers(); const loggedInUserId = getLoggedInUserId(); if (loadingRow) loadingRow.style.display = 'table-row'; if (users.length === 0) { if (loadingRow) loadingRow.style.display = 'none'; tableBody.innerHTML = '<tr><td colspan="4" class="text-center text-muted py-4">Nenhum usuário cadastrado no sistema.</td></tr>'; return; } users.sort((a, b) => a.name.localeCompare(b.name)); tableBody.innerHTML = ''; const administrators = users.filter(u => u && u.profile === 'administrator'); const isLastAdminScenario = administrators.length <= 1; users.forEach(user => { if (!user) return; const row = tableBody.insertRow(); const profileTranslated = translateProfile(user.profile); row.insertCell().textContent = user.name; row.insertCell().textContent = user.email; row.insertCell().textContent = profileTranslated; const actionsCell = row.insertCell(); actionsCell.className = 'text-end'; const editButton = document.createElement('button'); editButton.type = 'button'; editButton.className = 'btn btn-sm btn-outline-primary edit-user-btn me-1'; editButton.dataset.userId = user.id; editButton.dataset.userName = user.name; editButton.innerHTML = '<i class="bi bi-pencil-fill"></i> Alterar'; editButton.title = `Alterar dados de ${user.name}`; const deleteButton = document.createElement('button'); deleteButton.type = 'button'; deleteButton.className = 'btn btn-sm btn-outline-danger delete-user-btn'; deleteButton.dataset.userId = user.id; deleteButton.dataset.userName = user.name; deleteButton.innerHTML = '<i class="bi bi-trash-fill"></i> Excluir'; const isAdmin = user.profile === 'administrator'; const isSelf = user.id === loggedInUserId; const cantDelete = isSelf || (isAdmin && isLastAdminScenario); deleteButton.disabled = cantDelete; deleteButton.title = isSelf ? "Não é possível excluir a si mesmo" : (isAdmin && isLastAdminScenario ? "Não é possível excluir o último administrador" : `Excluir usuário ${user.name}`); actionsCell.appendChild(editButton); actionsCell.appendChild(deleteButton); }); }
function handleUserManagementActions(event) { const editButton = event.target.closest('.edit-user-btn'); const deleteButton = event.target.closest('.delete-user-btn'); if (editButton) { handleEditUserClick(editButton.dataset.userId); } else if (deleteButton && !deleteButton.disabled) { handleDeleteUserClick(deleteButton.dataset.userId, deleteButton.dataset.userName); } }

function handleEditUserClick(userId) { const user = getUserById(userId); if (!user) { showMessage('user-management-message', 'Usuário não encontrado.', 'danger'); return; } const modalElement = document.getElementById('editUserModal'); if (!modalElement) return; const form = modalElement.querySelector('#editUserForm'); const nameInput = modalElement.querySelector('#editUserName'); const emailInput = modalElement.querySelector('#editUserEmail'); const profileSelect = modalElement.querySelector('#editUserProfile'); const hiddenIdInput = modalElement.querySelector('#editUserId'); const profileWarning = modalElement.querySelector('#edit-profile-warning'); const emailFeedback = modalElement.querySelector('#edit-email-exists-feedback'); if (!form || !nameInput || !emailInput || !profileSelect || !hiddenIdInput || !profileWarning || !emailFeedback) { console.error("Elementos do modal de edição de usuário não encontrados."); return; } clearForm('editUserForm'); showMessage('edit-user-modal-message', ''); emailFeedback.style.display = 'none'; emailInput.classList.remove('is-invalid'); nameInput.value = user.name; emailInput.value = user.email; profileSelect.value = user.profile; hiddenIdInput.value = user.id; profileWarning.style.display = 'none'; profileSelect.onchange = () => { const administratorsCount = getAllUsers().filter(u => u && u.profile === 'administrator').length; const isLastAdmin = user.profile === 'administrator' && administratorsCount <= 1; profileWarning.style.display = (profileSelect.value === 'administrator' || (isLastAdmin && profileSelect.value !== 'administrator')) ? 'block' : 'none'; }; profileSelect.dispatchEvent(new Event('change')); const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }

function handleUserEditFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const form = event.target; const messageElement = form.querySelector('#edit-user-modal-message'); const nameInput = form.querySelector('#editUserName'); const emailInput = form.querySelector('#editUserEmail'); const profileSelect = form.querySelector('#editUserProfile'); const userId = form.querySelector('#editUserId').value; const emailFeedback = form.querySelector('#edit-email-exists-feedback'); const profileWarning = form.querySelector('#edit-profile-warning'); const saveButton = form.querySelector('#saveUserEditButton'); emailFeedback.style.display = 'none'; emailInput.classList.remove('is-invalid'); profileWarning.style.display = 'none'; form.classList.add('was-validated'); if (!form.checkValidity()) { return; } const originalUser = getUserById(userId); if (!originalUser) { showMessage(messageElement.id, 'Erro: Usuário original não encontrado.', 'danger'); return; } const newEmail = emailInput.value.trim().toLowerCase(); const newProfile = profileSelect.value; if (newEmail !== originalUser.email.toLowerCase()) { const users = getAllUsers(); if (users.some(u => u && u.id !== Number(userId) && u.email.toLowerCase() === newEmail)) { emailInput.classList.add('is-invalid'); emailFeedback.style.display = 'block'; form.classList.remove('was-validated'); emailInput.focus(); return; } } const administratorsCount = getAllUsers().filter(u => u && u.profile === 'administrator').length; const isLastAdmin = originalUser.profile === 'administrator' && administratorsCount <= 1; if (isLastAdmin && newProfile !== 'administrator') { showMessage(messageElement.id, 'Não é possível alterar o perfil do último administrador.', 'warning'); profileWarning.style.display = 'block'; return; } const userData = { id: userId, name: nameInput.value.trim(), email: emailInput.value.trim(), profile: newProfile, }; if (saveButton) saveButton.disabled = true; const result = updateUser(userData); if (result.success) { showMessage('user-management-message', result.message, 'success'); renderUsersTable('usersTableBody'); const modalElement = document.getElementById('editUserModal'); const modalInstance = bootstrap.Modal.getInstance(modalElement); if (modalInstance) modalInstance.hide(); } else { showMessage(messageElement.id, result.message, 'danger'); } if (saveButton) saveButton.disabled = false; }
function handleDeleteUserClick(userId, userName) { const modalElement = document.getElementById('deleteUserConfirmModal'); if (!modalElement) return; document.getElementById('userNameToDelete').textContent = userName || 'Usuário Desconhecido'; const confirmButton = document.getElementById('confirmUserDeleteButton'); confirmButton.dataset.userIdToDelete = userId; const userToDelete = getUserById(userId); const warningMessage = document.getElementById('deleteUserWarning'); const isAdmin = userToDelete?.profile === 'administrator'; const administratorsCount = getAllUsers().filter(u => u && u.profile === 'administrator').length; const isLastAdmin = isAdmin && administratorsCount <= 1; if (isLastAdmin) { if (warningMessage) warningMessage.style.display = 'block'; if (confirmButton) confirmButton.disabled = true; } else { if (warningMessage) warningMessage.style.display = 'none'; if (confirmButton) confirmButton.disabled = false; } const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement); modalInstance.show(); }
function handleConfirmUserDelete(event) { const button = event.target; const userIdToDelete = button.dataset.userIdToDelete; const modalElement = document.getElementById('deleteUserConfirmModal'); const modalInstance = bootstrap.Modal.getInstance(modalElement); if (userIdToDelete) { button.disabled = true; const result = deleteUser(userIdToDelete); if (result.success) { showMessage('user-management-message', result.message, 'success'); renderUsersTable('usersTableBody'); } else { showMessage('user-management-message', result.message, 'danger'); } if (modalInstance) modalInstance.hide(); const wasAdmin = result.userProfileBeforeDelete === 'administrator'; const remainingAdmins = getAllUsers().filter(u => u && u.profile === 'administrator').length; if (!(wasAdmin && remainingAdmins < 1)) { button.disabled = false; } delete button.dataset.userIdToDelete; } else { console.error("ID do usuário para exclusão não encontrado no botão!"); showMessage('user-management-message', 'Erro interno ao tentar excluir.', 'danger'); if (modalInstance) modalInstance.hide(); } }

function renderRecipesTable(tableBodyId) { const tableBody = document.getElementById(tableBodyId); const loadingRow = document.getElementById('loadingRecipes'); if (!tableBody) return; tableBody.innerHTML = ''; if (loadingRow) tableBody.appendChild(loadingRow); const userId = getLoggedInUserId(); const userProfile = getUserProfile(); const allRecipes = getAllRecipes(); const allPets = getAllPets(); const allUsers = getAllUsers(); let recipesToShow = []; if (userProfile === 'client') { const clientPetIds = getAllPetsByUser(userId).map(p => p.id); recipesToShow = allRecipes.filter(r => r && clientPetIds.includes(r.petId)); } else if (userProfile === 'veterinarian') { recipesToShow = allRecipes.filter(r => r && r.vetId === userId); } else { recipesToShow = allRecipes.filter(r => r != null); } if (loadingRow) loadingRow.style.display = 'table-row'; if (recipesToShow.length === 0) { if (loadingRow) loadingRow.style.display = 'none'; const columnCount = userProfile === 'client' ? 5 : (userProfile === 'veterinarian' ? 5 : 6); tableBody.innerHTML = `<tr><td colspan="${columnCount}" class="text-center text-muted py-4">Nenhuma receita encontrada.</td></tr>`; return; } recipesToShow.sort((a, b) => b.dateIssued.localeCompare(a.dateIssued)); tableBody.innerHTML = ''; recipesToShow.forEach(recipe => { if (!recipe) return; const pet = allPets.find(p => p && p.id === recipe.petId); const vet = allUsers.find(u => u && u.id === recipe.vetId); const client = allUsers.find(u => u && u.id === recipe.clientId); const petName = pet ? pet.name : `Pet ID ${recipe.petId}`; const tutorName = client ? client.name : `Tutor ID ${recipe.clientId}`; const vetName = vet ? vet.name : `Vet ID ${recipe.vetId}`; let formattedDate = 'Inválida'; try { formattedDate = new Date(recipe.dateIssued + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }); } catch (e) { } const row = tableBody.insertRow(); let rowHtml = ` <td>${formattedDate}</td> <td>${petName}</td> `; if (userProfile !== 'client') { rowHtml += `<td>${tutorName}</td>`; } if (userProfile === 'administrator') { rowHtml += `<td>${vetName}</td>`; } rowHtml += ` <td>${recipe.medication}</td> <td> <button type="button" class="btn btn-sm btn-outline-primary view-recipe-details-btn" data-recipe-id="${recipe.id}" data-consultation-id="${recipe.consultationId}" title="Ver Detalhes da Receita"> <i class="bi bi-eye-fill"></i> Ver Detalhes </button> </td> `; row.innerHTML = rowHtml; }); }
function handleRecipesTableActions(event) { const detailsButton = event.target.closest('.view-recipe-details-btn'); if (detailsButton) { const recipeId = detailsButton.dataset.recipeId; const consultationId = detailsButton.dataset.consultationId; if (recipeId && consultationId) { handleOpenViewRecipeModal(recipeId, consultationId); } else { const messageAreaId = document.getElementById('recipes-message') ? 'recipes-message' : 'dashboard-message'; showMessage(messageAreaId, 'Erro: Informações da receita ou consulta ausentes para visualização.', 'warning'); console.error("IDs ausentes para visualização:", { recipeId, consultationId }); } } }

document.addEventListener("DOMContentLoaded", (event) => {
    console.log("DOM Pronto. Inicializando App PetCare v1.37...");
    initializeSampleData();
    const canProceed = checkLoginAndSetupPage();
    setupDarkMode();
    setupFormValidationAndListeners();

    if (canProceed) {
        const userId = getLoggedInUserId();
        const userProfile = getUserProfile();
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';

        if (userId) {
            const user = getUserById(userId);
            const profilePhotoElement = document.getElementById('profilePhotoPreview');
            if (profilePhotoElement) {
                profilePhotoElement.src = user?.photoUrl || getDefaultProfilePhoto(user?.profile);
                profilePhotoElement.onerror = () => { profilePhotoElement.src = getDefaultProfilePhoto('default'); };
            }
        }

        if (userId) {
            if (currentPage === 'dashboard.html' || currentPage === '') { updateDashboardData(); }
            else if (currentPage === 'pets.html') {
                if (userProfile === 'administrator' || userProfile === 'veterinarian') {
                    renderPetsTableForAdmin('petsTableBody');
                    if (userProfile === 'administrator') {
                        populateAdminPetOwnerDropdown();
                    }
                } else {
                    renderPetsCards();
                }
            }
            else if (currentPage === 'consultations.html') {
                if (userProfile === 'administrator') { console.log("Configurando página de Consultas (Admin)..."); populateAdminVetDropdown('availabilityVetId'); renderAdminAvailabilitiesList('availabilitiesList'); renderAllBookedAppointments('bookedConsultationsTable'); const availabilityDateInput = document.getElementById('availabilityDateInput'); if (availabilityDateInput) availabilityDateInput.min = new Date().toISOString().split("T")[0]; }
                else if (userProfile === 'veterinarian') { console.log("Configurando página de Consultas (Veterinário)..."); renderVetConsultationsTable('vetBookedConsultationsTable', userId); }
                else if (userProfile === 'client') { console.log("Configurando página de Consultas (Cliente)..."); const calendarElement = document.getElementById('clientCalendar'); setTimeout(() => { if (!calendarElement) return; const hasPets = populateClientPetDropdown('bookingPetId', userId); if (hasPets) { initializeFlatpickrCalendar('clientCalendar'); } else { if (calendarElement) calendarElement.innerHTML = '<p class="text-center text-muted mt-3 p-3">Você precisa ter um pet cadastrado para poder selecionar datas e agendar consultas.</p>'; const bookingFormCard = document.getElementById('bookingForm')?.closest('.card'); if (bookingFormCard) bookingFormCard.style.display = 'none'; } renderClientBookedAppointments('clientBookedAppointmentsList', userId); }, 0); }
            }
            else if (currentPage === 'manage_users.html') { if (userProfile === 'administrator') { console.log("Configurando Gerenciamento de Usuários..."); renderUsersTable('usersTableBody'); } }
            else if (currentPage === 'profile.html') { console.log("Configurando Meu Perfil..."); const user = getUserById(userId); const profileNameElement = document.getElementById('profileName'); const profileEmailElement = document.getElementById('profileEmail'); const profileRoleElement = document.getElementById('profileRole'); if (user) { if (profileNameElement) profileNameElement.textContent = user.name; if (profileEmailElement) profileEmailElement.textContent = user.email; if (profileRoleElement) profileRoleElement.textContent = translateProfile(user.profile); } }
            else if (currentPage === 'recipes.html') { console.log("Configurando Página de Receitas..."); renderRecipesTable('recipesTableBody'); }
        }

    } else { console.log("Configuração da página interrompida devido a redirecionamento ou falha no login."); }


    setTimeout(() => {
        document.body.classList.remove('preload-transition');
        console.log("Classe preload-transition removida.");
    }, 50);

    console.log("App PetCare v1.37 Inicialização Concluída.");
});
