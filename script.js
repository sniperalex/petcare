// PetCare System - script.js v1.14
// Alterações: - Adiciona página/lógica de receitas (listar/visualizar/imprimir).
//             - Edição de perfil (senha/foto).
//             - Nome de usuário logado nos headers.
//             - Dashboard Vet/Admin: Contagem de consultas/receitas filtrada.
//             - Geração de dados exemplo refinada (datas próximas, vet1Id).
//             - Botão Sair agora sempre visível na sidebar aberta (via CSS).

// --- Configuração ---
const storageKeys = {
    users: 'petcare_users',
    pets: 'petcare_pets',
    recipes: 'petcare_recipes',
    availability: 'petcare_availability',
    booked_consultations: 'petcare_booked_consultations',
    ids: 'petcare_ids',
    theme: 'theme',
    loggedInUser: 'petcare_logged_in_user_id',
    sidebarState: 'sidebar_state'
};
const LG_BREAKPOINT = 992;
const DEFAULT_PET_PHOTO_PATH = 'img/';
const DEFAULT_USER_PHOTO = { administrator: `${DEFAULT_PET_PHOTO_PATH}admin.jpeg`, veterinarian: `${DEFAULT_PET_PHOTO_PATH}vet.jpeg`, client: `${DEFAULT_PET_PHOTO_PATH}client.jpeg`, default: `${DEFAULT_PET_PHOTO_PATH}placeholder_user.png` };
const DEFAULT_PET_PHOTO = `${DEFAULT_PET_PHOTO_PATH}pet_placeholder.png`;
const MAX_FILE_SIZE_MB = 2;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

// --- Helpers Local Storage ---
function loadFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    try {
        if (key === storageKeys.ids) { const p = data ? JSON.parse(data) : {}; return { user: p.user||0, pet: p.pet||0, recipe: p.recipe||0, availability: p.availability||0, booked_consultation: p.booked_consultation||0 }; }
        if ([storageKeys.users, storageKeys.pets, storageKeys.recipes, storageKeys.availability, storageKeys.booked_consultations].includes(key)) { return data ? JSON.parse(data) : []; }
        return data ? JSON.parse(data) : null;
    } catch (e) { console.error(`Erro ao carregar ${key}:`, e); if (key === storageKeys.ids) return { user: 0, pet: 0, recipe: 0, availability: 0, booked_consultation: 0 }; if ([storageKeys.users, storageKeys.pets, storageKeys.recipes, storageKeys.availability, storageKeys.booked_consultations].includes(key)) return []; return null; }
}
function saveToLocalStorage(key, data) { try { localStorage.setItem(key, JSON.stringify(data)); } catch (e) { console.error(`Erro ao salvar ${key}:`, e); const msgElId = document.getElementById('user-management-message') ? 'user-management-message' : (document.getElementById('consultations-message') ? 'consultations-message' : 'profile-message'); showMessage(msgElId || 'dashboard-message', `Erro: Limite de armazenamento local excedido.`, 'danger'); } }
function loadIdCounters() { return loadFromLocalStorage(storageKeys.ids); }
function saveIdCounters(counters) { saveToLocalStorage(storageKeys.ids, counters); }
function generateUniqueId(type) { const c = loadIdCounters(); if (typeof c[type] === 'undefined' || isNaN(c[type])) { c[type] = 0; } c[type]++; saveIdCounters(c); return c[type]; }

// --- Inicialização Dados Exemplo (v1.14 - Datas próximas) ---
function initializeSampleData() {
    let users = loadFromLocalStorage(storageKeys.users);
    let availabilities = loadFromLocalStorage(storageKeys.availability);
    const MAX_SAMPLE_AVAILABILITIES = 30; // Aumentado ligeiramente
    const vet1Email = 'vet@example.com';

    if (users.length === 0) {
        console.log("Init sample data v1.14 (no users found)...");
        const counters = { user: 0, pet: 0, recipe: 0, availability: 0, booked_consultation: 0 }; saveIdCounters(counters);
        const adminId = generateUniqueId('user'); const clientId1 = generateUniqueId('user'); const clientId2 = generateUniqueId('user'); const vetIds = []; const vetEmails = [vet1Email, 'vet2@example.com', 'dr.ana@example.com', 'dr.paulo@example.com']; let vet1Id = null;
        users = [ { id: adminId, name: 'Admin', email: 'admin@example.com', password: 'password', profile: 'administrator', photoUrl: null }, { id: clientId1, name: 'Cliente Feliz', email: 'client@example.com', password: 'password', profile: 'client', photoUrl: null }, { id: clientId2, name: 'Segundo Cliente', email: 'client2@example.com', password: 'password', profile: 'client', photoUrl: null }, ];
        vetEmails.forEach(email => { const vetId = generateUniqueId('user'); vetIds.push(vetId); if(email === vet1Email) vet1Id = vetId; let vetName = 'Dr(a). Vet'; if(email==='dr.ana@example.com') vetName='Dra. Ana Silva'; if(email==='dr.paulo@example.com') vetName='Dr. Paulo Souza'; if(email==='vet2@example.com') vetName='Dr(a). Vet 2'; users.push({ id: vetId, name: vetName, email: email, password: 'password', profile: 'veterinarian', photoUrl: null }); });
        saveToLocalStorage(storageKeys.users, users); saveToLocalStorage(storageKeys.recipes, []); saveToLocalStorage(storageKeys.booked_consultations, []);
        const samplePets = [ { id: generateUniqueId('pet'), ownerId: clientId1, name: 'Bolinha', species: 'Cão', breed: 'SRD', birthDate: '2020-05-10', photoUrl: 'img/pet1.jpeg', notes:'Bolinha adora.'}, { id: generateUniqueId('pet'), ownerId: clientId1, name: 'Mimi', species: 'Gato', breed: 'Siamês', birthDate: '2021-01-15', photoUrl: 'img/pet2.jpeg', notes:'Dorme muito.'}, { id: generateUniqueId('pet'), ownerId: clientId2, name: 'Loro', species: 'Ave', breed: 'Papagaio', birthDate: '2019-11-01', photoUrl: 'img/pet3.jpeg', notes:'Repete.'}, { id: generateUniqueId('pet'), ownerId: clientId2, name: 'Max', species: 'Cão', breed: 'Golden', birthDate: '2022-02-20', photoUrl: DEFAULT_PET_PHOTO, notes:'Brinca.' } ];
        saveToLocalStorage(storageKeys.pets, samplePets);

        // Gerar dados de disponibilidade (Abril/Maio 2025 E próximos dias)
        availabilities = []; // Começa vazio
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const upcomingDates = [];
        for (let i = 1; i < 15; i++) { // Próximos ~14 dias
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            const dayOfWeek = date.getDay();
            if (dayOfWeek > 0 && dayOfWeek < 6) { // Dias úteis
                upcomingDates.push(date.toISOString().split('T')[0]);
            }
        }
        const year2025 = 2025; const months2025 = [3, 4]; const dates2025 = [];
        months2025.forEach(mIdx => { const dIM = new Date(year2025, mIdx+1, 0).getDate(); for(let d=1; d<=dIM; d++){ const cd = new Date(year2025, mIdx, d); if([2,3,4].includes(cd.getDay())) { dates2025.push(`${year2025}-${(mIdx+1).toString().padStart(2,'0')}-${d.toString().padStart(2,'0')}`);}}});

        const allPossibleDates = [...upcomingDates, ...dates2025.sort(() => 0.5 - Math.random()).slice(0, MAX_SAMPLE_AVAILABILITIES - upcomingDates.length)]; // Pega próximos e alguns de 2025
        let availabilityCount = 0;
        if(vetIds.length > 0){
            allPossibleDates.forEach(dateStr => {
                 // Adiciona para 1 ou 2 vets aleatórios neste dia
                 const numVets = Math.random() > 0.6 && vetIds.length > 1 ? 2 : 1;
                 const shuffledVets = vetIds.sort(() => 0.5 - Math.random());
                 for(let i=0; i < numVets && availabilityCount < MAX_SAMPLE_AVAILABILITIES; i++){
                     const vetId = shuffledVets[i];
                     if(!availabilities.some(a => a.date === dateStr && a.vetId === vetId)){
                         availabilities.push({ id: generateUniqueId('availability'), date: dateStr, vetId: vetId });
                         availabilityCount++;
                     }
                 }
            });
            console.log(`Generated ${availabilityCount} sample availabilities.`);
        } else { console.warn("No vet IDs found."); }
        saveToLocalStorage(storageKeys.availability, availabilities);

        // Gerar Consultas/Receitas Exemplo (para datas próximas)
        if (vet1Id && samplePets.length >= 3 && availabilities.length >= 3) {
            let bookedConsultations = []; let recipes = [];
            const vet1UpcomingAvails = availabilities.filter(a => a.vetId === vet1Id && new Date(a.date+'T00:00:00') >= today)
                                                  .sort((a,b)=>a.date.localeCompare(b.date)) // Ordena pelas mais próximas
                                                  .slice(0, 3); // Pega até 3
            const pIds = [samplePets[0].id, samplePets[1].id, samplePets[3].id];
            const cIds = [samplePets[0].ownerId, samplePets[1].ownerId, samplePets[3].ownerId];
            let bookedCount = 0;

            if (vet1UpcomingAvails.length > 0) {
                 for(let i=0; i < vet1UpcomingAvails.length; i++) {
                      const av = vet1UpcomingAvails[i];
                      if (i >= pIds.length) break; // Garante que temos pets/clientes
                      const consId = generateUniqueId('booked_consultation');
                      let recId = null;
                      // Gera receita para primeiras consultas do exemplo (se possível < 2)
                      if(bookedCount < 2) {
                         recId = generateUniqueId('recipe');
                         recipes.push({ id:recId, consultationId:consId, vetId: vet1Id, petId: pIds[i], clientId: cIds[i], medication: i===0 ? 'Antibiótico X' : 'Anti-inflamatório Y', dosage: i===0 ? '10mg/kg, 12/12h, 7d' : '5mg, 1x dia, 3d', instructions: i===0 ? 'Comida.' : '', dateIssued: av.date });
                      }
                      bookedConsultations.push({ id:consId, date:av.date, time:'1'+i+':00', petId: pIds[i], clientId: cIds[i], vetId: vet1Id, reason:`Exemplo ${i+1}`, status: 'Agendada', diagnosis: i===0 ? 'Exemplo diagnóstico 1.' : null, recipeId: recId });
                      // Remove disponibilidade usada
                      const avIdx = availabilities.findIndex(a => a.id === av.id); if(avIdx!==-1) availabilities.splice(avIdx, 1);
                       bookedCount++;
                 }
                   saveToLocalStorage(storageKeys.booked_consultations, bookedConsultations);
                   saveToLocalStorage(storageKeys.recipes, recipes);
                   saveToLocalStorage(storageKeys.availability, availabilities); // Salva restantes
                   console.log(`Generated ${bookedCount} sample consultations for ${vet1Email} in upcoming dates.`);
             } else { console.warn(`No upcoming availabilities found for ${vet1Email} to generate sample consultations.`); }
        } else { console.warn("Could not generate sample consultations: missing vet1Id, pets or availabilities."); }
        console.log("Sample data v1.14 OK.");

    } else { loadIdCounters(); /* Garante outras chaves */ if (localStorage.getItem(storageKeys.availability) === null) { saveToLocalStorage(storageKeys.availability, []); } if (localStorage.getItem(storageKeys.booked_consultations) === null) { saveToLocalStorage(storageKeys.booked_consultations, []); } if (localStorage.getItem(storageKeys.recipes) === null) { saveToLocalStorage(storageKeys.recipes, []); } }
}

// --- Helpers Dados ---
function getAllUsers() { return loadFromLocalStorage(storageKeys.users); }
function getUserById(userId) { return getAllUsers().find(u => u.id === Number(userId)); }
function getAllVeterinarians() { return getAllUsers().filter(u => u.profile === 'veterinarian'); }
function getAllPets() { return loadFromLocalStorage(storageKeys.pets); }
function getPetById(petId) { return getAllPets().find(p => p.id === Number(petId)); }
function getAllPetsByUser(userId) { const userProfile = getUserProfile(); const allPets = getAllPets(); userId = Number(userId); if (!userProfile) return []; if (userProfile === 'administrator' || userProfile === 'veterinarian') { const users = getAllUsers(); return allPets.map(pet => { const owner = users.find(u => u.id === pet.ownerId); return { ...pet, ownerName: owner ? owner.name : '?' }; }); } else if (userProfile === 'client') { return allPets.filter(pet => pet.ownerId === userId); } else { return []; } }
function getAllAvailabilities() { return loadFromLocalStorage(storageKeys.availability); }
function getAllBookedConsultations() { return loadFromLocalStorage(storageKeys.booked_consultations); }
function getClientBookedConsultations(clientId) { clientId = Number(clientId); return getAllBookedConsultations().filter(consult => consult.clientId === clientId); }
function getBookedConsultationById(consultationId) { return getAllBookedConsultations().find(c => c.id === Number(consultationId)); }
function getAllRecipes() { return loadFromLocalStorage(storageKeys.recipes); }
function getRecipeById(recipeId) { return getAllRecipes().find(r => r.id === Number(recipeId)); }
function getRecipeByConsultationId(consultationId) { return getAllRecipes().find(r => r.consultationId === Number(consultationId)); }

// --- CRUD Disponibilidade (Admin) ---
function addAvailability(dateString, vetId) { const av = getAllAvailabilities(); const vId = Number(vetId); const ex = av.some(a => a.date === dateString && a.vetId === vId); if (ex) { return { success: false, message: 'Disponibilidade já cadastrada.' }; } const nA = { id: generateUniqueId('availability'), date: dateString, vetId: vId }; av.push(nA); saveToLocalStorage(storageKeys.availability, av); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const uad = [...new Set(getAllAvailabilities().map(a => a.date))]; clientFlatpickrInstance.set('enable', uad); } return { success: true, message: 'Disponibilidade salva.', data: nA }; }
function deleteAvailability(availabilityId) { let av = getAllAvailabilities(); const id = Number(availabilityId); const aTD = av.find(a => a.id === id); if (!aTD) { showMessage('consultations-message', 'Erro: Disponibilidade não encontrada.', 'danger'); return; } const dtD = aTD.date; const iL = av.length; av = av.filter(a => a.id !== id); if (av.length < iL) { saveToLocalStorage(storageKeys.availability, av); showMessage('consultations-message', 'Disponibilidade excluída.', 'success'); renderAdminAvailabilitiesList('availabilitiesList'); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const uad = [...new Set(getAllAvailabilities().map(a => a.date))]; clientFlatpickrInstance.set('enable', uad); } } else { showMessage('consultations-message', 'Erro ao excluir.', 'danger'); } }

// --- CRUD Agendamento (Cliente) ---
function bookConsultation(bookingData) { const bc = getAllBookedConsultations(); let av = getAllAvailabilities(); const vId = Number(bookingData.vetId); const pId = Number(bookingData.petId); const cId = Number(bookingData.clientId); const aIdx = av.findIndex(a => a.date === bookingData.date && a.vetId === vId); if (aIdx === -1) { return { success: false, message: 'Erro: Horário indisponível.' }; } const nB = { id: generateUniqueId('booked_consultation'), date: bookingData.date, time: 'N/A', petId: pId, clientId: cId, vetId: vId, reason: bookingData.reason || 'Não especificado', status: 'Agendada', diagnosis: null, recipeId: null }; bc.push(nB); saveToLocalStorage(storageKeys.booked_consultations, bc); const rA = av.splice(aIdx, 1)[0]; saveToLocalStorage(storageKeys.availability, av); console.log(`Consulta ${nB.id} agendada. Disp. ${rA?.id} removida.`); if (typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance) { const rAOD = av.some(a => a.date === bookingData.date); if (!rAOD) { const ce = clientFlatpickrInstance.config.enable.map(d => d instanceof Date ? d.toISOString().split('T')[0] : d); const ne = ce.filter(d => d !== bookingData.date); clientFlatpickrInstance.set('enable', ne); } } return { success: true, message: 'Consulta agendada!', data: nB }; }

// --- CRUD Consulta (Veterinário) ---
function updateConsultationStatus(consultationId, newStatus) { let bks = getAllBookedConsultations(); const idx = bks.findIndex(b => b.id === Number(consultationId)); if (idx === -1) { return { success: false, message: "Consulta não encontrada." }; } if (!['Agendada', 'Compareceu', 'Não Compareceu'].includes(newStatus)) { return { success: false, message: "Status inválido." }; } bks[idx].status = newStatus; saveToLocalStorage(storageKeys.booked_consultations, bks); return { success: true, message: "Status atualizado." }; }
function updateConsultationDiagnosis(consultationId, diagnosisText) { let bks = getAllBookedConsultations(); const idx = bks.findIndex(b => b.id === Number(consultationId)); if (idx === -1) { return { success: false, message: "Consulta não encontrada." }; } bks[idx].diagnosis = diagnosisText; saveToLocalStorage(storageKeys.booked_consultations, bks); return { success: true, message: "Diagnóstico salvo." }; }

// --- CRUD Receita (Veterinário) ---
function addOrUpdateRecipe(recipeData) { let recipes = getAllRecipes(); let consultation = getBookedConsultationById(recipeData.consultationId); if (!consultation) { return { success: false, message: "Consulta associada não encontrada." }; } const now = new Date().toISOString().split('T')[0]; const rp = { medication: recipeData.medication, dosage: recipeData.dosage, instructions: recipeData.instructions || '', vetId: Number(recipeData.vetId), petId: Number(consultation.petId), clientId: Number(consultation.clientId), consultationId: Number(recipeData.consultationId), dateIssued: now }; if (recipeData.recipeId) { const idx = recipes.findIndex(r => r.id === Number(recipeData.recipeId)); if (idx === -1) { return { success: false, message: "Receita a editar não encontrada." }; } recipes[idx] = { ...recipes[idx], ...rp }; saveToLocalStorage(storageKeys.recipes, recipes); return { success: true, message: "Receita atualizada.", data: recipes[idx] }; } else { rp.id = generateUniqueId('recipe'); recipes.push(rp); saveToLocalStorage(storageKeys.recipes, recipes); let bks = getAllBookedConsultations(); const bIdx = bks.findIndex(b => b.id === rp.consultationId); if (bIdx !== -1) { bks[bIdx].recipeId = rp.id; saveToLocalStorage(storageKeys.booked_consultations, bks); } else { console.warn(`Consulta ${rp.consultationId} não encontrada para vincular recipeId.`); } return { success: true, message: "Receita salva.", data: rp }; } }

// --- Pet CRUD Functions ---
function addPet(petData) { const allPets = getAllPets(); const newPet = { id: generateUniqueId('pet'), ownerId: Number(petData.ownerId), name: petData.name, species: petData.species, breed: petData.breed || '?', birthDate: petData.birthDate || null, photoUrl: petData.photoUrl || DEFAULT_PET_PHOTO, notes: petData.notes || '' }; allPets.push(newPet); saveToLocalStorage(storageKeys.pets, allPets); return newPet; }
function updatePet(petData) { let allPets = getAllPets(); const idx = allPets.findIndex(p => p.id === Number(petData.id)); if (idx !== -1) { const oldPhoto = allPets[idx].photoUrl; const newPhoto = petData.photoUrl; const finalPhotoUrl = (newPhoto && newPhoto !== DEFAULT_PET_PHOTO) ? newPhoto : (oldPhoto || DEFAULT_PET_PHOTO); allPets[idx] = { ...allPets[idx], name: petData.name, species: petData.species, breed: petData.breed || '?', birthDate: petData.birthDate || null, photoUrl: finalPhotoUrl, notes: petData.notes || '' }; saveToLocalStorage(storageKeys.pets, allPets); return allPets[idx]; } return null; }
function deletePet(petId) { let allPets = getAllPets(); const iL = allPets.length; allPets = allPets.filter(p => p.id !== Number(petId)); if (allPets.length < iL) { saveToLocalStorage(storageKeys.pets, allPets); return true; } return false; }

// --- User Management (Admin) ---
function deleteUser(userId) { let users = getAllUsers(); userId = Number(userId); const luid = getLoggedInUserId(); const uTD = users.find(u => u.id === userId); if (!uTD) { return { success: false, message: "Usuário não encontrado." }; } if (uTD.id === luid) { return { success: false, message: "Não pode excluir a si mesmo." }; } const admins = users.filter(u => u.profile === 'administrator'); if (uTD.profile === 'administrator' && admins.length <= 1) { return { success: false, message: "Não pode excluir o último admin." }; } const iL = users.length; users = users.filter(u => u.id !== userId); if (users.length < iL) { saveToLocalStorage(storageKeys.users, users); console.log(`Usuário ID ${userId} excluído.`); return { success: true, message: "Usuário excluído." }; } return { success: false, message: "Erro ao excluir." }; }

// --- UI Helpers ---
function showMessage(id, msg, type = 'success', dur = 4000) { const el=document.getElementById(id); if(!el) return; el.className='form-message'; el.textContent=''; if(msg){el.classList.add('alert', `alert-${type}`, 'alert-dismissible', 'fade', 'show'); let i=''; switch(type){case 'success': i='bi-check-circle-fill'; break; case 'danger': i='bi-x-octagon-fill'; break; case 'warning': i='bi-exclamation-triangle-fill'; break; case 'info': i='bi-info-circle-fill'; break;} el.innerHTML=`${i?'<i class="bi '+i+' me-2"></i>':''}${msg}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`; el.role='alert'; if(dur>0){setTimeout(()=>{if(document.getElementById(id)){bootstrap.Alert.getOrCreateInstance(el)?.close();}}, dur);}} }
function clearForm(id) { const f = document.getElementById(id); if (!f) return; f.reset(); f.classList.remove('was-validated'); f.querySelectorAll('.is-valid, .is-invalid').forEach(e => e.classList.remove('is-valid', 'is-invalid')); f.querySelectorAll('input:not([type=radio]):not([type=checkbox]),select,textarea').forEach(e => { e.setCustomValidity(''); if(e.tagName==='SELECT') { e.disabled=true; } }); if (id === 'petForm') { const p=document.getElementById('photoPreview'); if(p)p.src=DEFAULT_PET_PHOTO; const fi=document.getElementById('petPhotoFile'); if(fi)fi.value=''; const fe=document.getElementById('file-error-message'); if(fe)fe.textContent=''; } else if (id === 'registerUserForm') { const ef=document.getElementById('email-exists-feedback'); if(ef)ef.style.display='none'; const ei=document.getElementById('email'); if(ei)ei.classList.remove('is-invalid'); } else if (id === 'bookingForm') { const vs=document.getElementById('bookingVetId'); const ps=document.getElementById('bookingPetId'); const bs=document.getElementById('bookAppointmentButton'); const ds=document.getElementById('displaySelectedBookingDate'); const hs=document.getElementById('selectedBookingDateHidden'); if(vs){vs.innerHTML='<option value="" disabled selected>Selecione data</option>'; vs.disabled=true;} if(ps){ ps.disabled = true; } if(bs)bs.disabled=true; if(ds)ds.textContent='Nenhuma'; if(hs)hs.value=''; if(typeof clientFlatpickrInstance !== 'undefined' && clientFlatpickrInstance){ clientFlatpickrInstance.clear(); } } else if (id === 'diagnosisForm') { const cid=document.getElementById('diagnosisConsultationId'); if(cid)cid.value=''; const info=document.getElementById('diagnosisModalConsultationInfo'); if(info)info.textContent='...'; } else if (id === 'recipeForm') { const cid=document.getElementById('recipeConsultationId'); const rid=document.getElementById('existingRecipeId'); const info=document.getElementById('recipeModalConsultationInfo'); if(cid)cid.value=''; if(rid)rid.value=''; if(info)info.textContent='...'; } else if (id === 'passwordChangeForm') {} else if (id === 'availabilityForm') { /* Admin reset */ } const fm = document.getElementById(`${id}-message`); if(fm) { showMessage(fm.id, '', '', 0); } else { const gm = f.querySelector('.form-message'); if (gm && gm.id) { showMessage(gm.id, '', '', 0); } } }
function calculateAge(birthDateString) { if (!birthDateString) return 'Idade ?'; try { const bd = new Date(birthDateString+'T00:00:00'); if (isNaN(bd.getTime())) return '?'; const today = new Date(); today.setHours(0,0,0,0); let y = today.getFullYear()-bd.getFullYear(); let m = today.getMonth()-bd.getMonth(); let d = today.getDate()-bd.getDate(); if (m<0 || (m===0 && d<0)){ y--; m=(m+12)%12; } if(y>1) return `${y} anos`; if(y===1) return `1 ano`; if(m>1) return `${m} meses`; if(m===1) return `1 mês`; let days = Math.floor((today-bd)/(1000*60*60*24)); if (days>=7) return `${Math.floor(days/7)} sem`; if (days>1) return `${days} dias`; if (days===1) return `1 dia`; return `< 1 dia`; } catch (e) { return "?"; } }
function translateProfile(profile) { switch (profile) { case 'administrator': return 'Admin'; case 'veterinarian': return 'Vet'; case 'client': return 'Cliente'; default: return '?'; } }
function getDefaultProfilePhoto(profile) { return DEFAULT_USER_PHOTO[profile] || DEFAULT_USER_PHOTO.default; }

// --- Autenticação ---
function getLoggedInUserId() { const id = localStorage.getItem(storageKeys.loggedInUser); return id ? Number(id) : null; }
function getUserProfile() { const id = getLoggedInUserId(); if (id) { const u = getUserById(id); return u ? u.profile : null; } return null; }
function handleLogin(e) { e.preventDefault(); const f = e.target, m = f.querySelector('#form-message'); if (m) showMessage(m.id, '', '', 0); f.classList.add('was-validated'); if (!f.checkValidity()) { e.stopPropagation(); return; } const em = f.querySelector('#email').value, pw = f.querySelector('#password').value; const u = getAllUsers().find(usr => usr.email.toLowerCase() === em.toLowerCase() && usr.password === pw); if (u) { localStorage.setItem(storageKeys.loggedInUser, u.id); if (m) showMessage(m.id, `Login OK! Redirecionando...`, 'success', 1500); setTimeout(() => window.location.href = 'dashboard.html', 1000); } else { if (m) showMessage(m.id, 'Email/senha inválidos.', 'danger'); if (f.querySelector('#password')) f.querySelector('#password').value = ''; f.classList.remove('was-validated'); } }
function handleLogout(e) { localStorage.removeItem(storageKeys.loggedInUser); localStorage.removeItem(storageKeys.sidebarState); window.location.href='index.html'; }

// --- Setup de Página e Layout ---
function checkLoginAndSetupPage() {
    const uid = getLoggedInUserId(); const page = window.location.pathname.split('/').pop() || 'index.html'; const pub = ['index.html', 'forgot_password.html']; const reg = 'register.html'; const adminPages = ['manage_users.html']; const body = document.body; body.className = body.className.replace(/(admin-registering|self-registering|profile-\w+|logged-in|logged-out|body-pd)/g, '').trim(); const uNDD = document.getElementById('loggedInUserNameDisplay'); const uNDM = document.getElementById('loggedInUserNameDisplayMobile'); const profPhoto = document.getElementById('profileUserPhoto'); /* Header photo TBD */ if(uNDD)uNDD.innerHTML=''; if(uNDM)uNDM.innerHTML='';
    if (uid) {
        const user = getUserById(uid); if (!user) { console.error("UserID inválido!"); localStorage.removeItem(storageKeys.loggedInUser); localStorage.removeItem(storageKeys.sidebarState); window.location.href = 'index.html'; return false; }
        body.classList.add('logged-in'); body.classList.add(`profile-${user.profile}`);
        const profileTranslated = translateProfile(user.profile); const userDisplayHTML = `<i class="bi bi-person-circle me-1"></i> Olá, ${user.name.split(' ')[0]} (${profileTranslated})`; if (uNDD) uNDD.innerHTML = userDisplayHTML; if (uNDM) uNDM.innerHTML = userDisplayHTML; const pD = document.getElementById('loggedInUserProfile'); if (pD) pD.textContent = `${user.name} (${profileTranslated})`;
        if (page === reg) { if (user.profile === 'administrator') { body.classList.add('admin-registering'); if (body.classList.contains('body-with-sidebar')) { setupSidebar(); const pt=document.getElementById('registerPageTitle'); if(pt)pt.textContent='Cadastrar Usuário'; } return true; } else { window.location.href = 'dashboard.html'; return false; } }
        if (pub.includes(page)) { window.location.href = 'dashboard.html'; return false; }
        if (adminPages.includes(page) && user.profile !== 'administrator') { window.location.href = 'dashboard.html'; return false; }
        if (body.classList.contains('body-with-sidebar')) { setupSidebar(); } else { body.classList.remove('body-pd'); body.style.paddingTop = '0'; }
    } else {
        body.classList.add('logged-out'); if (page === reg) { body.classList.add('self-registering'); body.style.paddingTop = '0'; const pt=document.getElementById('registerPageTitle'); if(pt)pt.textContent='Cadastro'; return true; }
        if (!pub.includes(page) && page !== reg) { window.location.href = 'index.html'; return false; } body.style.paddingTop = '0';
    } return true;
}

// --- Cadastro / Recuperação Senha / Edição Perfil ---
function handleRegisterUser(e) { e.preventDefault(); const f=e.target; const m=f.querySelector('#form-message'); const p=f.querySelector('#password'); const cp=f.querySelector('#confirmPassword'); const ei=f.querySelector('#email'); const ps=f.querySelector('#profileSelect'); if(m)showMessage(m.id,'', '', 0); if(ei){ei.classList.remove('is-invalid'); const ef=document.getElementById('email-exists-feedback'); if(ef)ef.style.display='none';} if(cp)cp.setCustomValidity(''); let pm=true; if(p&&cp){if(p.value!==cp.value){cp.setCustomValidity('Senhas não coincidem.');pm=false;}else{cp.setCustomValidity('');}} f.classList.add('was-validated'); if(!f.checkValidity()||!pm){e.stopPropagation(); if(!pm&&cp){cp.reportValidity();} return;} const name=f.querySelector('#name').value; const email=ei.value; const password=p.value; let profile='client'; if(ps&&window.getComputedStyle(ps.closest('.profile-select-wrapper')).display!=='none'){profile=ps.value; if(!profile){ps.setCustomValidity('Selecione perfil.');ps.reportValidity(); f.classList.add('was-validated'); return;}} const users=getAllUsers(); if(users.some(u=>u.email.toLowerCase()===email.toLowerCase())){if(m)showMessage(m.id,'Email já cadastrado.','danger'); if(ei){ei.classList.add('is-invalid'); const ef=document.getElementById('email-exists-feedback'); if(ef)ef.style.display='block'; ei.focus();} f.classList.remove('was-validated'); return;} const nu={id:generateUniqueId('user'), name, email, password:password, profile:profile, photoUrl:null}; users.push(nu); saveToLocalStorage(storageKeys.users, users); const iar=document.body.classList.contains('admin-registering'); if(iar){if(m)showMessage(m.id, `Usuário ${profile} "${name}" cadastrado!`, 'success'); clearForm(f.id);}else{if(m)showMessage(m.id, `Cadastro ok! Redirecionando...`, 'success', 2500); setTimeout(()=>window.location.href='index.html', 2000); const sb=f.querySelector('button[type="submit"]'); if(sb)sb.disabled=true;} }
function handleForgotPassword(e) { e.preventDefault(); const f = e.target, m = f.querySelector('#form-message'); if (m) showMessage(m.id, '', '', 0); f.classList.add('was-validated'); if (!f.checkValidity()) { e.stopPropagation(); return; } const em = f.querySelector('#email').value; if (getAllUsers().some(u => u.email.toLowerCase() === em.toLowerCase())) { if (m) showMessage(m.id, `Link "enviado".`, 'success'); if (f.querySelector('#email')) f.querySelector('#email').value = ''; f.classList.remove('was-validated'); } else { if (m) showMessage(m.id, 'Email não cadastrado.', 'danger'); if (f.querySelector('#email')) f.querySelector('#email').classList.add('is-invalid'); } }
function handlePasswordChangeSubmit(event) { event.preventDefault(); event.stopPropagation(); const f=event.target; const msg=document.getElementById('password-change-message'); const cur=document.getElementById('currentPassword'); const n=document.getElementById('newPassword'); const c=document.getElementById('confirmNewPassword'); showMessage(msg.id,'','',0); c.setCustomValidity(''); f.classList.add('was-validated'); if(n.value!==c.value){c.setCustomValidity('Senhas não coincidem.');} if(!f.checkValidity()){return;} const uid=getLoggedInUserId(); const us=getAllUsers(); const idx=us.findIndex(u=>u.id===uid); if(idx===-1){showMessage(msg.id,'Erro: Usuário.','danger'); return;} if(us[idx].password!==cur.value){showMessage(msg.id,'Senha atual incorreta.','danger'); cur.value=''; cur.focus(); f.classList.remove('was-validated'); cur.classList.add('is-invalid'); return;} us[idx].password=n.value; saveToLocalStorage(storageKeys.users,us); showMessage(msg.id,'Senha alterada!','success'); clearForm(f.id); f.classList.remove('was-validated'); }
function handlePhotoUploadSubmit(event) { event.preventDefault(); const form=event.target; const fi=document.getElementById('profilePhotoFile'); const fem=document.getElementById('profile-file-error-message'); const pv=document.getElementById('profilePhotoPreview'); const msg=document.getElementById('profile-message'); showMessage(msg.id,'','',0); fem.textContent=''; const f=fi.files[0]; if(!f){fem.textContent='Selecione arquivo.'; return;} if(!f.type.startsWith('image/')){fem.textContent='Inválido.'; fi.value=''; return;} if(f.size>MAX_FILE_SIZE_BYTES){fem.textContent=`Grande (Máx ${MAX_FILE_SIZE_MB}MB).`; fi.value=''; return;} const r=new FileReader(); r.onload=(e)=>{const nu=e.target.result; const uid=getLoggedInUserId(); let us=getAllUsers(); const idx=us.findIndex(u=>u.id===uid); if(idx===-1){showMessage(msg.id,'Erro: Usuário.','danger'); return;} us[idx].photoUrl=nu; try{saveToLocalStorage(storageKeys.users, us); if(pv)pv.src=nu; showMessage(msg.id,'Foto atualizada!','success'); fi.value='';}catch(err){showMessage(msg.id,'Erro salvar foto.','danger');}}; r.onerror=()=>{showMessage(msg.id,'Erro ler arquivo.','danger');}; r.readAsDataURL(f); }

// --- Sidebar e Header Mobile ---
function setupSidebar() { const tgs = document.querySelectorAll('.nav_toggle'); const nav = document.getElementById('navbar'); const bod = document.body; if (tgs.length > 0 && nav && bod && bod.classList.contains('body-with-sidebar')) { tgs.forEach(t => { t.removeEventListener('click', toggleSidebar); t.addEventListener('click', toggleSidebar); }); window.removeEventListener('resize', handleSidebarResize); window.addEventListener('resize', handleSidebarResize); initializeSidebarState(); adjustContentPadding(); } else { tgs.forEach(t => t.removeEventListener('click', toggleSidebar)); window.removeEventListener('resize', handleSidebarResize); if (bod) { bod.classList.remove('body-pd'); bod.style.paddingTop = '0'; } } }
function initializeSidebarState() { const n=document.getElementById('navbar'); const b=document.body; const t=document.querySelectorAll('.nav_toggle'); if(!n||!b||t.length===0||!b.classList.contains('body-with-sidebar'))return; const s=localStorage.getItem(storageKeys.sidebarState); const d=window.innerWidth>=LG_BREAKPOINT; let e=false; if(d){e=(s!=='retracted'); n.classList.toggle('show-sidebar',e); b.classList.toggle('body-pd',e);}else{e=false; n.classList.remove('show-sidebar'); b.classList.remove('body-pd');} updateToggleIcons(e); }
function toggleSidebar() { const n=document.getElementById('navbar'); const b=document.body; if(!n||!b||!b.classList.contains('body-with-sidebar'))return; const d=window.innerWidth>=LG_BREAKPOINT; const i=!n.classList.contains('show-sidebar'); n.classList.toggle('show-sidebar',i); if(d){b.classList.toggle('body-pd',i); localStorage.setItem(storageKeys.sidebarState,i?'expanded':'retracted');}else{b.classList.remove('body-pd'); localStorage.removeItem(storageKeys.sidebarState);} updateToggleIcons(i); adjustContentPadding(); }
function updateToggleIcons(isExpanded) { const t=document.querySelectorAll('.nav_toggle'); const a=isExpanded?'bi-x':'bi-list'; const r=isExpanded?'bi-list':'bi-x'; t.forEach(e=>{if(e.classList.contains(r))e.classList.remove(r); if(!e.classList.contains(a))e.classList.add(a);}); }
function handleSidebarResize() { initializeSidebarState(); adjustContentPadding(); }
function adjustContentPadding() { const b=document.body; const h=document.querySelector('.mobile-header'); if(!b||!h||!b.classList.contains('logged-in')||!b.classList.contains('body-with-sidebar')){document.documentElement.style.setProperty('--mobile-header-height','0px'); if(b)b.style.paddingTop='0px'; return;} const m=window.innerWidth<LG_BREAKPOINT; const hh=m?h.offsetHeight:0; document.documentElement.style.setProperty('--mobile-header-height',`${hh}px`); b.style.paddingTop=m?`var(--mobile-header-height)`:'0px'; }

// --- Dark Mode ---
function setupDarkMode() { const s=document.querySelectorAll('#darkModeSwitch, #darkModeSwitchDesktop, #darkModeSwitchMobile'); const i=getInitialTheme(); applyTheme(i); if(s.length>0){s.forEach(e=>{e.removeEventListener('change',handleDarkModeToggle); e.addEventListener('change',handleDarkModeToggle);});} }
function getInitialTheme() { let t=localStorage.getItem(storageKeys.theme); if(!t){t=window.matchMedia?.('(prefers-color-scheme: dark)')?.matches?'dark-mode':'light-mode';} return t; }
function applyTheme(theme) { document.body.classList.toggle('dark-mode', theme === 'dark-mode'); document.body.classList.toggle('light-mode', theme !== 'dark-mode'); const s = document.querySelectorAll('#darkModeSwitch, #darkModeSwitchDesktop, #darkModeSwitchMobile'); const c = (theme === 'dark-mode'); s.forEach(e=>{if(e.checked!==c)e.checked=c;}); }
function handleDarkModeToggle(event) { const c=event.target; const n=c.checked?'dark-mode':'light-mode'; localStorage.setItem(storageKeys.theme,n); applyTheme(n); }

// --- Validação e Listeners Formulários ---
function setupFormValidationAndListeners() {
    document.querySelectorAll('form.needs-validation').forEach(f=>{f.removeEventListener('submit', handleGenericFormValidation); f.addEventListener('submit', handleGenericFormValidation, {capture: true});});
    function handleGenericFormValidation(e){const f=e.target; f.classList.add('was-validated');}
    const lf = document.getElementById('loginForm'); if(lf)lf.addEventListener('submit', handleLogin);
    const rf = document.getElementById('registerUserForm'); if(rf){rf.addEventListener('submit', handleRegisterUser); const p=rf.querySelector('#password'),c=rf.querySelector('#confirmPassword'); if(p&&c){const v=()=>{c.setCustomValidity(c.value!==''&&p.value!==c.value?'Senhas não coincidem.':'');}; c.addEventListener('input',v); p.addEventListener('input',v);} const ei=rf.querySelector('#email'); if(ei){ei.addEventListener('input',()=>{ei.classList.remove('is-invalid'); const ef=document.getElementById('email-exists-feedback'); if(ef)ef.style.display='none';});}}
    const ff = document.getElementById('forgotPasswordForm'); if(ff)ff.addEventListener('submit', handleForgotPassword);
    const lo = document.getElementById('logout-link'); if(lo)lo.addEventListener('click', handleLogout);
    const ptc=document.getElementById('petsCardContainer'); if(ptc){ptc.addEventListener('click', handlePetCardActions); const apb=document.getElementById('addPetButton'); if(apb)apb.addEventListener('click', handleAddPetClick); const pf=document.getElementById('petForm'); if(pf)pf.addEventListener('submit', handlePetFormSubmit); const cdb=document.getElementById('confirmDeleteButton'); if(cdb)cdb.addEventListener('click', handleConfirmDelete); const pme=document.getElementById('petModal'); if(pme)pme.addEventListener('hidden.bs.modal', handlePetModalClose); const pi=document.getElementById('petPhotoFile'); if(pi)pi.addEventListener('change', handlePhotoFileChange); document.addEventListener('click', (e)=>{if(e.target&&e.target.id==='addPetButtonEmpty'){handleAddPetClick();}}); const bdi=document.getElementById('petBirthDate'); if(bdi)bdi.max=new Date().toISOString().split("T")[0];}
    const aal=document.getElementById('availabilitiesList'); if(aal){aal.removeEventListener('click', handleAdminAvailabilityListClick); aal.addEventListener('click', handleAdminAvailabilityListClick);}
    const vetTableBody = document.getElementById('vetBookedConsultationsTable'); if(vetTableBody) { vetTableBody.removeEventListener('change', handleVetConsultationActions); vetTableBody.removeEventListener('click', handleVetConsultationActions); vetTableBody.addEventListener('change', handleVetConsultationActions); vetTableBody.addEventListener('click', handleVetConsultationActions); }
    const diagnosisForm = document.getElementById('diagnosisForm'); if(diagnosisForm) { diagnosisForm.removeEventListener('submit', handleSaveDiagnosis); diagnosisForm.addEventListener('submit', handleSaveDiagnosis); }
    const usersTableBody = document.getElementById('usersTableBody'); if(usersTableBody) { usersTableBody.removeEventListener('click', handleUserManagementActions); usersTableBody.addEventListener('click', handleUserManagementActions); }
    const confirmUserDeleteButton = document.getElementById('confirmUserDeleteButton'); if(confirmUserDeleteButton) { confirmUserDeleteButton.removeEventListener('click', handleConfirmUserDelete); confirmUserDeleteButton.addEventListener('click', handleConfirmUserDelete); }
    const passwordChangeForm = document.getElementById('passwordChangeForm'); if (passwordChangeForm) { passwordChangeForm.removeEventListener('submit', handlePasswordChangeSubmit); passwordChangeForm.addEventListener('submit', handlePasswordChangeSubmit); const np=passwordChangeForm.querySelector('#newPassword'), cnp=passwordChangeForm.querySelector('#confirmNewPassword'); if(np&&cnp){const v=()=>{cnp.setCustomValidity(cnp.value!==''&&np.value!==cnp.value?'Senhas não coincidem.':'');}; cnp.addEventListener('input',v); np.addEventListener('input',v);} }
    const profilePhotoForm = document.getElementById('profilePhotoForm'); if(profilePhotoForm) { profilePhotoForm.removeEventListener('submit', handlePhotoUploadSubmit); profilePhotoForm.addEventListener('submit', handlePhotoUploadSubmit); const ppi = document.getElementById('profilePhotoFile'); if(ppi) ppi.addEventListener('change', (e) => {const p=document.getElementById('profilePhotoPreview'); if(p && e.target.files && e.target.files[0]){const r=new FileReader(); r.onload=()=>p.src=r.result; r.readAsDataURL(e.target.files[0]);}});}
    const recipeForm = document.getElementById('recipeForm'); if(recipeForm){ recipeForm.removeEventListener('submit', handleSaveRecipe); recipeForm.addEventListener('submit', handleSaveRecipe); }
    const printRecipeBtn = document.getElementById('printRecipeButton'); if(printRecipeBtn){ printRecipeBtn.removeEventListener('click', handlePrintRecipe); printRecipeBtn.addEventListener('click', handlePrintRecipe); }
    const clientList = document.getElementById('clientBookedAppointmentsList'); if(clientList) { clientList.removeEventListener('click', handleClientConsultationActions); clientList.addEventListener('click', handleClientConsultationActions); }
     // NOVO v1.14: Listener para tabela de receitas
     const recipesTableBody = document.getElementById('recipesTableBody'); if(recipesTableBody) { recipesTableBody.removeEventListener('click', handleRecipesTableActions); recipesTableBody.addEventListener('click', handleRecipesTableActions); }
}


// --- Renderização Cards de Pets ---
function renderPetsCards() { const cc=document.getElementById('petsCardContainer'); const lp=document.getElementById('petsLoadingPlaceholder'); if(!cc)return; const u=getLoggedInUserId(); if(!u){cc.innerHTML='<div class="col-12"><div class="alert alert-danger">Usuário?</div></div>'; if(lp)lp.style.display='none'; return;} if(lp)lp.style.display='flex'; cc.innerHTML=''; const up=getAllPetsByUser(u); if(lp)lp.style.display='none'; if(!up||up.length===0){const p=getUserProfile(); let m=p==='client'?"Nenhum pet.":"Nenhum pet no sistema."; cc.innerHTML=`<div class="col-12 text-center mt-4"><img src="img/empty_state_pets.svg" width="150" class="mb-3 opacity-50"><p class="text-muted fs-5">${m}</p><button type="button" class="btn btn-success mt-2 client-only admin-only" data-bs-toggle="modal" data-bs-target="#petModal" id="addPetButtonEmpty"><i class="bi bi-plus-circle-fill"></i> Adicionar</button></div>`;} else { up.forEach(pet=>{const a=calculateAge(pet.birthDate); const ps=pet.photoUrl||DEFAULT_PET_PHOTO; const c=document.createElement('div'); c.className='col-md-6 col-lg-4 mb-4 d-flex align-items-stretch'; let nH=''; if(pet.notes){const sn=pet.notes.substring(0,80); nH=`<p class="mt-2 mb-0 text-muted fst-italic small" title="${pet.notes}">Obs: ${sn}${pet.notes.length>80?'...':''}</p>`;} let oI=''; if(pet.ownerName){oI=`<dl class="row gx-2 gy-0 mb-1 small"><dt class="col-auto fw-normal text-muted">Tutor:</dt><dd class="col">${pet.ownerName}</dd></dl>`;} c.innerHTML=`<div class="card h-100 shadow-sm pet-card w-100"><img src="${ps}" class="card-img-top pet-card-img" onerror="this.onerror=null; this.src='${DEFAULT_PET_PHOTO}';"><div class="card-body d-flex flex-column"><h5 class="card-title mb-1">${pet.name}</h5><p class="card-text text-muted small mb-2">${pet.species} - ${pet.breed}</p><div class="small mb-3 flex-grow-1"><dl class="row gx-2 gy-0 mb-1"><dt class="col-auto fw-normal text-muted">Idade:</dt><dd class="col">${a}</dd></dl><dl class="row gx-2 gy-0 mb-0"><dt class="col-auto fw-normal text-muted">Nasc.:</dt><dd class="col">${pet.birthDate?new Date(pet.birthDate+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'}):'N/A'}</dd></dl>${oI}${nH}</div><div class="mt-auto d-flex justify-content-end gap-2 border-top pt-2"><button type="button" class="btn btn-sm btn-outline-primary edit-pet-btn client-only admin-only" data-pet-id="${pet.id}" title="Editar"><i class="bi bi-pencil-fill"></i></button><button type="button" class="btn btn-sm btn-outline-danger delete-pet-btn client-only admin-only" data-pet-id="${pet.id}" data-pet-name="${pet.name}" title="Excluir"><i class="bi bi-trash-fill"></i></button></div></div></div>`; cc.appendChild(c);});} }

// --- Handlers Página Pets ---
function handlePetCardActions(event) { const t=event.target.closest('button'); if(!t)return; const p=t.dataset.petId; if(!p)return; if(t.classList.contains('edit-pet-btn'))handleEditPetClick(p); else if(t.classList.contains('delete-pet-btn'))handleDeletePetClick(p,t.dataset.petName); }
function handleAddPetClick() { clearForm('petForm'); document.getElementById('petId').value=''; document.getElementById('petModalLabel').textContent='Adicionar Pet'; showMessage('modal-form-message','','',0); const s=document.getElementById('savePetButton'); if(s)s.disabled=false; }
function handleEditPetClick(petId) { const p=getPetById(petId); if(!p){showMessage('pets-message','Erro: Pet.','danger'); return;} clearForm('petForm'); document.getElementById('petId').value=p.id; document.getElementById('petName').value=p.name; document.getElementById('petSpecies').value=p.species; document.getElementById('petBreed').value=p.breed==='?'?'':p.breed; document.getElementById('petBirthDate').value=p.birthDate||''; document.getElementById('petNotes').value=p.notes||''; document.getElementById('petModalLabel').textContent=`Editar: ${p.name}`; document.getElementById('photoPreview').src=p.photoUrl||DEFAULT_PET_PHOTO; showMessage('modal-form-message','','',0); document.getElementById('file-error-message').textContent=''; const s=document.getElementById('savePetButton'); if(s)s.disabled=false; const m=bootstrap.Modal.getOrCreateInstance(document.getElementById('petModal')); m.show(); }
function handleDeletePetClick(petId, petName) { document.getElementById('petNameToDelete').textContent=petName||'?'; document.getElementById('confirmDeleteButton').dataset.petIdToDelete=petId; const m=bootstrap.Modal.getOrCreateInstance(document.getElementById('deleteConfirmModal')); m.show(); }
function handleConfirmDelete(event) { const b=event.target; const p=b.dataset.petIdToDelete; const e=document.getElementById('deleteConfirmModal'); const i=bootstrap.Modal.getInstance(e); if(p){b.disabled=true; const s=deletePet(p); if(s){showMessage('pets-message','Excluído!','success'); renderPetsCards(); updateDashboardData();}else{showMessage('pets-message','Erro excluir.','danger');} if(i)i.hide(); b.disabled=false; delete b.dataset.petIdToDelete;}else{console.error("Pet ID missing!"); showMessage('pets-message','Erro.','danger'); if(i)i.hide();} }
function handlePetModalClose(event) { clearForm('petForm'); const s=document.getElementById('savePetButton'); if(s){s.disabled=false; s.innerHTML='Salvar';} const m=document.getElementById('petModalLabel'); if(m)m.textContent='Adicionar Pet'; }
function handlePhotoFileChange(event) { const fi=event.target; const p=document.getElementById('photoPreview'); const fm=document.getElementById('file-error-message'); fm.textContent=''; const f=fi.files[0]; if(f){if(!f.type.startsWith('image/')){fm.textContent='Inválido.'; fi.value=''; p.src=DEFAULT_PET_PHOTO; return;} if(f.size>MAX_FILE_SIZE_BYTES){fm.textContent=`Grande (Máx ${MAX_FILE_SIZE_MB}MB).`; fi.value=''; p.src=DEFAULT_PET_PHOTO; return;} const r=new FileReader(); r.onload=(e)=>{p.src=e.target.result;}; r.onerror=()=>{fm.textContent='Erro ler.'; p.src=DEFAULT_PET_PHOTO;}; r.readAsDataURL(f);}else{const pid=document.getElementById('petId').value; const cp=pid?getPetById(pid):null; p.src=cp?(cp.photoUrl||DEFAULT_PET_PHOTO):DEFAULT_PET_PHOTO;} }
function handlePetFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const f=event.target; const sb=f.querySelector('#savePetButton'); const fi=f.querySelector('#petPhotoFile'); const fem=document.getElementById('file-error-message'); f.classList.add('was-validated'); if(!f.checkValidity()){return;} const pid=f.querySelector('#petId').value; const cp=pid?getPetById(pid):null; const luid=getLoggedInUserId(); if(!luid){showMessage('modal-form-message','Erro: Usuário.','danger'); return;} const pd={id:pid?Number(pid):null, ownerId:luid, name:f.querySelector('#petName').value, species:f.querySelector('#petSpecies').value, breed:f.querySelector('#petBreed').value, birthDate:f.querySelector('#petBirthDate').value, notes:f.querySelector('#petNotes').value, photoUrl:cp?cp.photoUrl:DEFAULT_PET_PHOTO}; sb.disabled=true; sb.innerHTML=`<span class="spinner-border spinner-border-sm"></span> Salvando...`; fem.textContent=''; const fl=fi.files[0]; const s=(fpd)=>{let sc=false; let m=''; let sp=null; try{if(fpd.id){sp=updatePet(fpd); sc=!!sp;}else{sp=addPet(fpd); sc=!!sp;} m=sc?(fpd.id?'Atualizado!':'Adicionado!'):'Erro.';}catch(er){console.error("Erro salvar pet:",er); sc=false; m='Erro.';} sb.disabled=false; sb.innerHTML='Salvar'; if(sc){const pme=document.getElementById('petModal'); const pmi=bootstrap.Modal.getInstance(pme); if(pmi)pmi.hide(); showMessage('pets-message',m,'success'); renderPetsCards(); updateDashboardData();}else{showMessage('modal-form-message',m,'danger');}}; if(fl&&fl.type.startsWith('image/')&&fl.size<=MAX_FILE_SIZE_BYTES){const r=new FileReader(); r.onload=(e)=>{pd.photoUrl=e.target.result; s(pd);} ;r.onerror=()=>{showMessage('modal-form-message','Erro imagem.','danger'); sb.disabled=false; sb.innerHTML='Salvar';} ;r.readAsDataURL(fl);}else if(fl){fem.textContent='Inválido/grande.'; f.querySelector('#petPhotoFile').classList.add('is-invalid'); sb.disabled=false; sb.innerHTML='Salvar';}else{s(pd);} }

// --- Renderização Dados Dashboard ---
function updateDashboardData() { const uid = getLoggedInUserId(); if (!uid) return; const usr = getUserById(uid); if (!usr) return; const page = window.location.pathname.split('/').pop(); if (page === 'dashboard.html' || page === '') { const profile = usr.profile; const cpcE = document.getElementById('totalPetsCount'); const spcE = document.getElementById('systemTotalPetsCount'); if (profile === 'client') { if(cpcE) cpcE.textContent = getAllPetsByUser(uid).length; } else { if(spcE) spcE.textContent = getAllPets().length; } const cCT = document.getElementById('consultationsCardTitle'); const cCE = document.getElementById('totalConsultationsCount'); let cC = 0; if (profile === 'veterinarian') { cC = getAllBookedConsultations().filter(c => c.vetId === uid).length; if(cCT) cCT.textContent = "Minhas Consultas"; } else { cC = getAllBookedConsultations().length; if(cCT) cCT.textContent = "Consultas Agendadas"; } if(cCE) cCE.textContent = cC; const rCE = document.getElementById('totalRecipesCount'); const rCT = document.getElementById('recipesCardTitle'); let rC = 0; const allR = getAllRecipes(); if (profile === 'client') { const cPI = getAllPetsByUser(uid).map(p => p.id); rC = allR.filter(r => cPI.includes(r.petId)).length; if(rCT) rCT.textContent = "Minhas Receitas"; } else if (profile === 'veterinarian') { rC = allR.filter(r => r.vetId === uid).length; if(rCT) rCT.textContent = "Receitas Emitidas"; } else { rC = allR.length; if(rCT) rCT.textContent = "Receitas Ativas"; } if(rCE) rCE.textContent = rC; renderDashboardAgenda(profile, uid); } }
function renderDashboardAgenda(prof, uid) { const tb=document.getElementById('dashboardAgendaTableBody'); if(!tb)return; let cTS = []; if (prof === 'administrator') { cTS = getAllBookedConsultations(); } else if (prof === 'veterinarian') { cTS = getAllBookedConsultations().filter(c => c.vetId === Number(uid)); } if(cTS.length === 0) { tb.innerHTML=`<tr><td colspan="5" class="text-center text-muted py-4">Nenhuma consulta agendada ${prof==='veterinarian'?'para você':'no sistema'}.</td></tr>`; } else { tb.innerHTML = ''; cTS.sort((a, b) => a.date.localeCompare(b.date) || a.time.localeCompare(b.time)).slice(0, 10).forEach(c => { const p = getPetById(c.petId); const cl = getUserById(c.clientId); const r = tb.insertRow(); r.innerHTML = `<td>${new Date(c.date+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'})}</td><td>${c.time}</td><td>${p?p.name:'?'}</td><td>${cl?cl.name:'?'}</td><td>${c.reason}</td>`; }); } }


// --- Lógica Específica Página Consultas ---

// == Funções do Administrador ==
function populateAdminVetDropdown(id){const s=document.getElementById(id); if(!s)return; s.innerHTML='<option value="" disabled selected>Sel.</option>'; const v=getAllVeterinarians(); v.sort((a,b)=>a.name.localeCompare(b.name)); v.forEach(vt=>{const o=document.createElement('option'); o.value=vt.id; o.textContent=vt.name; s.appendChild(o);});}
function renderAdminAvailabilitiesList(id){const l=document.getElementById(id); const ld=document.getElementById('availabilitiesLoading'); if(!l)return; if(ld)ld.style.display='block'; l.innerHTML=''; const av=getAllAvailabilities(); const us=getAllUsers(); if(ld)ld.style.display='none'; if(av.length===0){l.innerHTML='<li class="list-group-item text-muted text-center">Nenhuma disponibilidade.</li>'; return;} av.sort((a,b)=>{const dc=b.date.localeCompare(a.date); if(dc!==0)return dc; const va=us.find(u=>u.id===a.vetId)?.name||'?'; const vb=us.find(u=>u.id===b.vetId)?.name||'?'; return va.localeCompare(vb);}); av.forEach(a=>{const v=us.find(u=>u.id===a.vetId); const vn=v?v.name:`ID ${a.vetId}?`; let dd='Inv.'; try{dd=new Date(a.date+'T00:00:00').toLocaleDateString('pt-BR',{weekday:'long',year:'numeric',month:'long',day:'numeric',timeZone:'UTC'});}catch(e){} const li=document.createElement('li'); li.className='list-group-item d-flex justify-content-between align-items-center'; li.innerHTML=`<span><i class="bi bi-calendar-check text-success me-2"></i><strong>${dd}</strong> - ${vn}</span><button class="btn btn-sm btn-outline-danger delete-availability-btn" data-availability-id="${a.id}" title="Excluir"><i class="bi bi-trash"></i></button>`; l.appendChild(li);});}
function handleAdminAvailabilityFormSubmit(e){ e.preventDefault(); e.stopPropagation(); const f=e.target; const di=f.querySelector('#availabilityDateInput'); const vs=f.querySelector('#availabilityVetId'); const mi='availability-form-message'; f.classList.add('was-validated'); if(!f.checkValidity()){return;} const ds=di.value; const vid=vs.value; const r=addAvailability(ds,vid); if(r.success){showMessage(mi,r.message,'success'); renderAdminAvailabilitiesList('availabilitiesList'); clearForm(f.id); f.classList.remove('was-validated');} else{showMessage(mi,r.message,'danger'); di.classList.remove('is-invalid'); vs.classList.remove('is-invalid');} }
function handleAdminAvailabilityListClick(e){ const db=e.target.closest('.delete-availability-btn'); if(db){const aid=db.dataset.availabilityId; if(aid){if(confirm('Excluir?')){deleteAvailability(aid);}}} }
function renderAllBookedAppointments(id){const tb=document.getElementById(id); const lr=document.getElementById('loadingAllBookings'); if(!tb)return; tb.innerHTML=''; if(lr)tb.appendChild(lr); const bks=getAllBookedConsultations(); const p=getAllPets(); const u=getAllUsers(); if(lr)lr.style.display='table-row'; if(bks.length===0){if(lr)lr.style.display='none'; tb.innerHTML='<tr><td colspan="7" class="text-center text-muted py-4">Nenhuma consulta.</td></tr>'; return;} bks.sort((a,b)=>b.date.localeCompare(a.date)); tb.innerHTML=''; bks.forEach(bk=>{const pt=p.find(x=>x.id===bk.petId); const vt=u.find(x=>x.id===bk.vetId); const cl=u.find(x=>x.id===bk.clientId); const pn=pt?pt.name:`ID ${bk.petId}`; const tn=cl?cl.name:`ID ${bk.clientId}`; const vn=vt?vt.name:`ID ${bk.vetId}`; let dd='Inv.'; try{dd=new Date(bk.date+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} let sbc='bg-secondary'; if(bk.status==='Agendada')sbc='bg-info'; else if(bk.status==='Compareceu')sbc='bg-success'; else if(bk.status==='Não Compareceu')sbc='bg-danger'; const row=tb.insertRow(); row.innerHTML=`<td>${dd}</td><td>${bk.time}</td><td>${pn}</td><td>${tn}</td><td>${vn}</td><td>${bk.reason}</td><td><span class="badge ${sbc}">${bk.status}</span></td>`;});}

// == Funções do Cliente ==
let clientFlatpickrInstance;
function populateClientPetDropdown(id, cId){const s=document.getElementById(id); if(!s)return false; s.innerHTML='<option value="" disabled selected>Sel.</option>'; const p=getAllPetsByUser(cId); if(p.length===0){s.disabled=true; s.innerHTML='<option value="" disabled selected>Nenhum pet</option>'; showMessage('bookingForm-message','Cadastre pet.','warning',0); return false;} p.sort((a,b)=>a.name.localeCompare(b.name)); p.forEach(pt=>{const o=document.createElement('option'); o.value=pt.id; o.textContent=pt.name; s.appendChild(o);}); s.disabled=true; return true;}
function getAvailableVetsForDate(date){const av=getAllAvailabilities(); const as=av.filter(a=>a.date===date); if(as.length===0){return [];} const v=getAllVeterinarians(); const avi=[...new Set(as.map(sl=>sl.vetId))]; const avl=v.filter(vt=>avi.includes(vt.id)); avl.sort((a,b)=>a.name.localeCompare(b.name)); return avl;}
function renderClientBookedAppointments(id, cId){const l=document.getElementById(id); if(!l)return; l.innerHTML=''; const b=getClientBookedConsultations(cId); const p=getAllPets(); const v=getAllVeterinarians(); const r=getAllRecipes(); if(b.length===0){l.innerHTML='<li class="list-group-item text-muted text-center">Nenhuma consulta.</li>'; return;} b.sort((a,b)=>b.date.localeCompare(a.date)); b.forEach(bk=>{const pt=p.find(x=>x.id===bk.petId); const vt=v.find(x=>x.id===bk.vetId); const pn=pt?pt.name:`ID ${bk.petId}`; const vn=vt?vt.name:`ID ${bk.vetId}`; let dd='Inv.'; try{dd=new Date(bk.date+'T00:00:00').toLocaleDateString('pt-BR',{year:'numeric',month:'long',day:'numeric',timeZone:'UTC'});}catch(e){} const li=document.createElement('li'); li.className='list-group-item'; let diagHTML=bk.diagnosis?`<div class="small ps-4 mt-1"><strong>Diagnóstico:</strong> ${bk.diagnosis.replace(/\n/g,'<br>')}</div>`:`<div class="small text-muted ps-4 mt-1 fst-italic">Diagnóstico pendente</div>`; let rBtnHTML=''; if(bk.recipeId){const rec=r.find(re=>re.id===bk.recipeId); if(rec){rBtnHTML=`<button type="button" class="btn btn-sm btn-outline-secondary view-recipe-btn ms-2" data-recipe-id="${bk.recipeId}" data-consultation-id="${bk.id}"><i class="bi bi-receipt"></i> Ver Receita</button>`;}} li.innerHTML=`<div><i class="bi bi-calendar-check-fill text-success me-2"></i><strong>${dd}</strong> (Status: ${bk.status})${rBtnHTML}</div><div class="small text-muted ps-4">Pet: ${pn} | Vet: ${vn} | Motivo: ${bk.reason}</div>${diagHTML}`; l.appendChild(li);});}
function initializeFlatpickrCalendar(id){const ce=document.getElementById(id); if(!ce||typeof flatpickr!=='function'){if(ce)ce.innerHTML='<p class="text-danger">Erro calendário.</p>'; return;} ce.innerHTML=''; const av=getAllAvailabilities(); const ad=[...new Set(av.map(a=>a.date))]; const opt={locale:"pt", inline:true, dateFormat:"Y-m-d", minDate:"today", enable:ad, onChange:function(sd,ds,i){const dde=document.getElementById('displaySelectedBookingDate'); const hid=document.getElementById('selectedBookingDateHidden'); const vs=document.getElementById('bookingVetId'); const ps=document.getElementById('bookingPetId'); const drf=document.getElementById('date-required-feedback'); if(vs){vs.innerHTML='<option value="" disabled selected>Sel.</option>'; vs.disabled=true; vs.classList.remove('is-invalid');} if(ps){ps.selectedIndex=0; ps.disabled=true; ps.classList.remove('is-invalid');} if(hid)hid.value=''; if(dde)dde.textContent='Nenhuma'; if(drf)drf.style.display='none'; showMessage('bookingForm-message','','',0); if(ds){if(dde){try{const dO=i.parseDate(ds,"Y-m-d");dde.textContent=dO.toLocaleDateString('pt-BR',{dateStyle:'full'});}catch(e){dde.textContent=ds;}} if(hid)hid.value=ds; const avl=getAvailableVetsForDate(ds); if(avl.length>0&&vs){vs.innerHTML='<option value="" disabled selected>Sel.</option>'; avl.forEach(v=>{const o=document.createElement('option');o.value=v.id;o.textContent=v.name;vs.appendChild(o);}); if(avl.length===1){vs.value=avl[0].id; vs.disabled=true;}else{vs.disabled=false;}} else if(vs){vs.innerHTML='<option value="" disabled selected>Nenhum Vet</option>'; vs.disabled=true;} if(ps&&ps.options.length>1){ps.disabled=false;}} else {if(vs)vs.disabled=true; if(ps)ps.disabled=true;} checkBookingButtonState();}}; try{clientFlatpickrInstance=flatpickr(ce,opt); console.log("Flatpickr OK.");} catch(err){console.error("Erro flatpickr:", err); ce.innerHTML='<p class="text-danger">Erro calendário.</p>';}}
function checkBookingButtonState() { const h=document.getElementById('selectedBookingDateHidden'); const v=document.getElementById('bookingVetId'); const p=document.getElementById('bookingPetId'); const b=document.getElementById('bookAppointmentButton'); if(!h||!v||!p||!b){if(b)b.disabled=true;return;} const ds=h.value; const vs=v.value; const ps=p.value; const ok=ds&&vs&&ps; b.disabled=!ok; }
function handleBookingFormSubmit(event) { event.preventDefault(); event.stopPropagation(); const f=event.target; const mid='bookingForm-message'; const h=document.getElementById('selectedBookingDateHidden'); const drf=document.getElementById('date-required-feedback'); let d=h&&h.value; if(!d){if(drf)drf.style.display='block'; showMessage(mid,'Selecione data.','warning'); return;} else {if(drf)drf.style.display='none';} f.classList.add('was-validated'); if (!f.checkValidity()) { return; } const cid=getLoggedInUserId(); if (!cid) { showMessage(mid, 'Erro: Usuário.','danger'); return; } const bd={ date: h.value, petId: f.querySelector('#bookingPetId').value, vetId: f.querySelector('#bookingVetId').value, reason: f.querySelector('#bookingReason').value, clientId: cid }; const r=bookConsultation(bd); if (r.success) { showMessage(mid, r.message, 'success'); renderClientBookedAppointments('clientBookedAppointmentsList', cid); const abt=document.getElementById('bookedConsultationsTable'); if(abt&&window.getComputedStyle(abt.closest('.card')).display!=='none'){renderAllBookedAppointments('bookedConsultationsTable');} const vbt=document.getElementById('vetBookedConsultationsTable'); if(vbt&&window.getComputedStyle(vbt.closest('.vet-only')).display!=='none'){renderVetConsultationsTable('vetBookedConsultationsTable',getLoggedInUserId());} clearForm(f.id); f.classList.remove('was-validated'); } else { showMessage(mid, r.message || 'Erro agendar.', 'danger'); } }
function handleClientConsultationActions(event) { const vrb = event.target.closest('.view-recipe-btn'); if (vrb) { const rId = vrb.dataset.recipeId; const cId = vrb.dataset.consultationId; if (rId) { handleOpenViewRecipeModal(rId, cId); } else { const bk = getBookedConsultationById(cId); if(bk && bk.recipeId){ handleOpenViewRecipeModal(bk.recipeId, cId); } else { showMessage('consultations-message', 'Receita não encontrada.', 'warning'); } } } }

// == Funções do Veterinário ==
function handleVetConsultationActions(event) { const target = event.target; if (target.classList.contains('vet-status-select')) { const cid = target.dataset.consultationId; const ns = target.value; const r = updateConsultationStatus(cid, ns); if (r.success) { showMessage('vet-consultations-message', r.message, 'success'); target.className = 'form-select form-select-sm vet-status-select'; let sbc = 'bg-light'; if (ns === 'Agendada') sbc = 'bg-info-subtle'; else if (ns === 'Compareceu') sbc = 'bg-success-subtle'; else if (ns === 'Não Compareceu') sbc = 'bg-danger-subtle'; target.classList.add(sbc); const cl=document.getElementById('clientBookedAppointmentsList'); if(cl){const oId=getBookedConsultationById(cid)?.clientId; if(oId) renderClientBookedAppointments('clientBookedAppointmentsList',oId);} const abt=document.getElementById('bookedConsultationsTable'); if(abt){renderAllBookedAppointments('bookedConsultationsTable');} } else { showMessage('vet-consultations-message', r.message, 'danger'); const b = getBookedConsultationById(cid); if(b) target.value = b.status; } } const diagnosisButton = target.closest('.vet-diagnosis-btn'); if (diagnosisButton) { handleOpenDiagnosisModal(diagnosisButton.dataset.consultationId); } const recipeButton = target.closest('.vet-recipe-btn'); if (recipeButton) { handleOpenRecipeModal(recipeButton.dataset.consultationId); } }
function handleOpenDiagnosisModal(consultationId) { const booking = getBookedConsultationById(consultationId); if (!booking) { showMessage('vet-consultations-message', 'Consulta?', 'danger'); return; } const m=document.getElementById('diagnosisModal'); const t=document.getElementById('diagnosisModalLabel'); const i=document.getElementById('diagnosisModalConsultationInfo'); const d=document.getElementById('diagnosisText'); const h=document.getElementById('diagnosisConsultationId'); if (!m||!t||!i||!d||!h) { return; } const pet=getPetById(booking.petId); const pn=pet?pet.name:'?'; let dt=booking.date; try{const o=new Date(booking.date+'T00:00:00'); dt=o.toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} t.textContent=`Diagnóstico ${dt}`; i.textContent=`Pet: ${pn}`; d.value=booking.diagnosis||''; h.value=consultationId; showMessage('diagnosisModal-message','','',0); const mdl=bootstrap.Modal.getOrCreateInstance(m); mdl.show(); }
function handleSaveDiagnosis(event) { event.preventDefault(); const f=event.target; const cid=f.querySelector('#diagnosisConsultationId').value; const dt=f.querySelector('#diagnosisText').value; if(!cid){showMessage('diagnosisModal-message','Erro ID.','danger'); return;} const result = updateConsultationDiagnosis(cid, dt.trim()); if(result.success){showMessage('vet-consultations-message', result.message, 'success'); const m=document.getElementById('diagnosisModal'); const mdl=bootstrap.Modal.getInstance(m); if(mdl) mdl.hide(); const vt=document.getElementById('vetBookedConsultationsTable'); if(vt){const b=vt.querySelector(`.vet-diagnosis-btn[data-consultation-id="${cid}"]`); if(b){b.innerHTML=`<i class="bi bi-pencil-square"></i> ${dt.trim()?'Editar':'Diag.'}`; b.title=dt.trim()?'Editar':'Adicionar Diagnóstico';}} const cl=document.getElementById('clientBookedAppointmentsList'); if(cl){const ownerId=getBookedConsultationById(cid)?.clientId; if(ownerId) renderClientBookedAppointments('clientBookedAppointmentsList',ownerId);}} else {showMessage('diagnosisModal-message', result.message||'Erro salvar.', 'danger');} }
function renderVetConsultationsTable(tableBodyId, vetId) { const tb=document.getElementById(tableBodyId); const lr=document.getElementById('loadingVetBookings'); if (!tb) return; tb.innerHTML=''; if(lr)tb.appendChild(lr); const bks=getAllBookedConsultations().filter(c=>c.vetId===Number(vetId)); const p=getAllPets(); const u=getAllUsers(); if(lr)lr.style.display='table-row'; if(bks.length===0){if(lr)lr.style.display='none'; tb.innerHTML='<tr><td colspan="7" class="text-center text-muted py-4">Nenhuma consulta.</td></tr>'; return;} bks.sort((a,b)=>b.date.localeCompare(a.date)); tb.innerHTML=''; bks.forEach(bk=>{const pt=p.find(x=>x.id===bk.petId); const cl=u.find(x=>x.id===bk.clientId); const pn=pt?pt.name:`ID ${bk.petId}`; const tn=cl?cl.name:`ID ${bk.clientId}`; let dd='Inv.'; try{const dO=new Date(bk.date+'T00:00:00'); dd=dO.toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} const row=tb.insertRow(); const so=['Agendada','Compareceu','Não Compareceu']; const ss=document.createElement('select'); ss.className='form-select form-select-sm vet-status-select'; ss.dataset.consultationId=bk.id; so.forEach(s=>{const o=document.createElement('option'); o.value=s; o.textContent=s; if(s===bk.status){o.selected=true;} ss.appendChild(o);}); let sbc='bg-light'; if(bk.status==='Agendada')sbc='bg-info-subtle'; else if(bk.status==='Compareceu')sbc='bg-success-subtle'; else if(bk.status==='Não Compareceu')sbc='bg-danger-subtle'; ss.classList.add(sbc); const diagBtn=document.createElement('button'); diagBtn.type='button'; diagBtn.className='btn btn-sm btn-outline-primary vet-diagnosis-btn me-1'; diagBtn.dataset.consultationId=bk.id; diagBtn.innerHTML=`<i class="bi bi-pencil-square"></i> ${bk.diagnosis?'Editar':'Diag.'}`; diagBtn.title=bk.diagnosis?'Editar':'Adicionar Diagnóstico'; const recipeBtn=document.createElement('button'); recipeBtn.type='button'; recipeBtn.className='btn btn-sm btn-outline-success vet-recipe-btn'; recipeBtn.dataset.consultationId=bk.id; recipeBtn.innerHTML=`<i class="bi bi-receipt"></i> ${bk.recipeId?'Editar':'Receita'}`; recipeBtn.title=bk.recipeId?'Editar':'Adicionar Receita'; const actionsCell=document.createElement('td'); actionsCell.appendChild(diagBtn); actionsCell.appendChild(recipeBtn); row.innerHTML=`<td>${dd}</td><td>${bk.time}</td><td>${pn}</td><td>${tn}</td><td>${bk.reason}</td><td></td><td></td>`; row.cells[5].appendChild(ss); row.cells[6].appendChild(actionsCell); }); }
function handleOpenRecipeModal(consultationId) { const booking = getBookedConsultationById(consultationId); if (!booking) { showMessage('vet-consultations-message', 'Consulta?', 'danger'); return; } const existingRecipe = booking.recipeId ? getRecipeById(booking.recipeId) : null; const m=document.getElementById('recipeModal'); const t=document.getElementById('recipeModalLabel'); const i=document.getElementById('recipeModalConsultationInfo'); const cid=document.getElementById('recipeConsultationId'); const rid=document.getElementById('existingRecipeId'); const med=document.getElementById('recipeMedication'); const dos=document.getElementById('recipeDosage'); const inst=document.getElementById('recipeInstructions'); if(!m||!cid||!rid||!med||!dos||!inst||!t||!i){ return; } clearForm('recipeForm'); cid.value = consultationId; const pet=getPetById(booking.petId); const pn=pet?pet.name:'?'; let dt=booking.date; try{const d=new Date(booking.date+'T00:00:00'); dt=d.toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} t.textContent = existingRecipe ? 'Editar Receita' : 'Adicionar Receita'; i.textContent = `Consulta: ${dt} - Pet: ${pn}`; if(existingRecipe){rid.value=existingRecipe.id; med.value=existingRecipe.medication; dos.value=existingRecipe.dosage; inst.value=existingRecipe.instructions;} showMessage('recipeModal-message','','',0); const mdl=bootstrap.Modal.getOrCreateInstance(m); mdl.show(); }
function handleSaveRecipe(event) { event.preventDefault(); event.stopPropagation(); const f=event.target; const msgEl=document.getElementById('recipeModal-message'); f.classList.add('was-validated'); if (!f.checkValidity()) { return; } const vId=getLoggedInUserId(); const cId=f.querySelector('#recipeConsultationId').value; if (!vId||!cId){showMessage(msgEl.id,'Erro: Info faltando.','danger'); return;} const rData={recipeId:f.querySelector('#existingRecipeId').value||null, consultationId:cId, vetId:vId, medication:f.querySelector('#recipeMedication').value, dosage:f.querySelector('#recipeDosage').value, instructions:f.querySelector('#recipeInstructions').value}; const result=addOrUpdateRecipe(rData); if(result.success){showMessage('vet-consultations-message',result.message,'success'); const mE=document.getElementById('recipeModal'); const mdl=bootstrap.Modal.getInstance(mE); if(mdl)mdl.hide(); const vT=document.getElementById('vetBookedConsultationsTable'); if(vT){const btn=vT.querySelector(`.vet-recipe-btn[data-consultation-id="${cId}"]`); if(btn){btn.innerHTML='<i class="bi bi-receipt"></i> Editar'; btn.title='Editar Receita';}} const cL=document.getElementById('clientBookedAppointmentsList'); if(cL){const oId=getBookedConsultationById(cId)?.clientId; if(oId) renderClientBookedAppointments('clientBookedAppointmentsList',oId);} updateDashboardData(); } else {showMessage(msgEl.id,result.message||'Erro salvar.','danger');} }
function handleOpenViewRecipeModal(recipeId, consultationId) { const r=getRecipeById(recipeId); const b=getBookedConsultationById(consultationId); const mE=document.getElementById('viewRecipeModal'); const mB=document.getElementById('viewRecipeModalBodyContent'); if (!mE||!mB||!r||!b){showMessage('consultations-message','Erro carregar.','warning'); return;} const p=getPetById(b.petId); const v=getUserById(b.vetId); const c=getUserById(b.clientId); const pn=p?p.name:'?'; const vn=v?v.name:'?'; const cn=c?c.name:'?'; let cd=b.date; try{cd=new Date(b.date+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} let idt=r.dateIssued; try{idt=new Date(r.dateIssued+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){} mB.innerHTML=`<h5 class="mb-3 text-center text-primary fw-bold">Receituário Médico Veterinário</h5><hr><p><strong>Paciente:</strong> ${pn} <br><strong>Tutor:</strong> ${cn}</p><hr><p><strong>Consulta:</strong> ${cd} <br><strong>Emissão:</strong> ${idt} <br><strong>Vet.:</strong> ${vn}</p><hr><p><strong>Uso ${p?.species||'Animal'}</strong></p><p><strong>1) ${r.medication}</strong></p><p class="ps-3"><em>Dosagem:</em> ${r.dosage}</p>${r.instructions?`<p class="ps-3"><em>Instruções:</em> ${r.instructions.replace(/\n/g,'<br>')}</p>`:''}<hr><p class="text-center small text-muted mt-4">PetCare System v1.14</p>`; const mdl=bootstrap.Modal.getOrCreateInstance(mE); mdl.show(); }
function handlePrintRecipe() { const mc=document.getElementById('viewRecipeModalBodyContent'); if(!mc)return; const pW=window.open('','_blank','height=600,width=800'); pW.document.write('<html><head><title>Receita</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"><style>body{padding:20px;font-family:sans-serif;}hr{margin:1rem 0;border-top:1px solid #ccc;}.text-primary{color:#000 !important;}strong{font-weight:bold;}.small{font-size:0.85em;}.text-muted{color:#555 !important;}.mt-4{margin-top:1.5rem !important;}.text-center{text-align:center !important;}.ps-3{padding-left:1rem !important;}.ps-4{padding-left:1.5rem !important;}.fst-italic{font-style:italic !important;}.fw-bold{font-weight:bold !important;}.mb-3{margin-bottom:1rem !important;}</style></head><body>'); pW.document.write(mc.innerHTML); pW.document.write('</body></html>'); pW.document.close(); pW.focus(); setTimeout(()=>{ pW.print(); pW.close(); }, 250); }

// == Funções de Gerenciamento de Usuários (Admin) ==
function renderUsersTable(tableBodyId) { const tb=document.getElementById(tableBodyId); const lr=document.getElementById('loadingUsers'); if(!tb)return; tb.innerHTML=''; if(lr)tb.appendChild(lr); const us=getAllUsers(); const luid=getLoggedInUserId(); if(lr)lr.style.display='table-row'; if(us.length===0){if(lr)lr.style.display='none'; tb.innerHTML='<tr><td colspan="4" class="text-center text-muted py-4">Nenhum usuário.</td></tr>'; return;} us.sort((a,b)=>a.name.localeCompare(b.name)); tb.innerHTML=''; us.forEach(u=>{const row=tb.insertRow(); const pt=translateProfile(u.profile); const db=document.createElement('button'); db.type='button'; db.className='btn btn-sm btn-outline-danger delete-user-btn'; db.dataset.userId=u.id; db.dataset.userName=u.name; db.innerHTML='<i class="bi bi-trash-fill"></i> Excluir'; db.disabled=(u.id===luid); db.title=u.id===luid?"Não pode excluir a si mesmo":`Excluir ${u.name}`; const ac=row.insertCell(); ac.appendChild(db); /* Edit Btn Here */ row.insertCell().textContent=u.name; row.insertCell().textContent=u.email; row.insertCell().textContent=pt; }); }
function handleUserManagementActions(event) { const db=event.target.closest('.delete-user-btn'); if(db){handleDeleteUserClick(db.dataset.userId, db.dataset.userName);} /* Edit Logic Here */ }
function handleDeleteUserClick(userId, userName) { const m=document.getElementById('deleteUserConfirmModal'); if(!m)return; document.getElementById('userNameToDelete').textContent=userName||'?'; document.getElementById('confirmUserDeleteButton').dataset.userIdToDelete=userId; const uTD=getUserById(userId); const w=document.getElementById('deleteUserWarning'); const cBtn=document.getElementById('confirmUserDeleteButton'); let allowDelete=true; if(uTD&&uTD.profile==='administrator'){const adms=getAllUsers().filter(u=>u.profile==='administrator'); if(adms.length<=1){if(w)w.style.display='block'; if(cBtn)cBtn.disabled=true; allowDelete=false;}else{if(w)w.style.display='none'; if(cBtn)cBtn.disabled=false;}}else{if(w)w.style.display='none'; if(cBtn)cBtn.disabled=false;} const dm=bootstrap.Modal.getOrCreateInstance(m); dm.show(); }
function handleConfirmUserDelete(event) { const b=event.target; const uId=b.dataset.userIdToDelete; const mE=document.getElementById('deleteUserConfirmModal'); const mI=bootstrap.Modal.getInstance(mE); if(uId){b.disabled=true; const r=deleteUser(uId); if(r.success){showMessage('user-management-message', r.message, 'success'); renderUsersTable('usersTableBody');}else{showMessage('user-management-message', r.message, 'danger');} if(mI)mI.hide(); b.disabled=false; delete b.dataset.userIdToDelete;}else{console.error("User ID missing!"); showMessage('user-management-message','Erro.','danger'); if(mI)mI.hide();} }

// == Funções da Página de Receitas == NOVO v1.14
function renderRecipesTable(tableBodyId) {
    const tableBody = document.getElementById(tableBodyId);
    const loadingRow = document.getElementById('loadingRecipes');
    if (!tableBody) return;

    tableBody.innerHTML = '';
    if (loadingRow) tableBody.appendChild(loadingRow);

    const uid = getLoggedInUserId();
    const profile = getUserProfile();
    const allRecipes = getAllRecipes();
    const pets = getAllPets();
    const users = getAllUsers();
    let recipesToShow = [];

    if (profile === 'client') {
        const clientPetIds = getAllPetsByUser(uid).map(p => p.id);
        recipesToShow = allRecipes.filter(r => clientPetIds.includes(r.petId));
    } else if (profile === 'veterinarian') {
        recipesToShow = allRecipes.filter(r => r.vetId === uid);
    } else { // Admin
        recipesToShow = allRecipes;
    }

     if (loadingRow) loadingRow.style.display = 'table-row';

    if (recipesToShow.length === 0) {
         if (loadingRow) loadingRow.style.display = 'none';
         const cols = profile === 'client' ? 5 : (profile === 'veterinarian' ? 5 : 6); // Colspan ajustado
        tableBody.innerHTML = `<tr><td colspan="${cols}" class="text-center text-muted py-4">Nenhuma receita encontrada.</td></tr>`;
        return;
    }

    recipesToShow.sort((a, b) => b.dateIssued.localeCompare(a.dateIssued)); // Mais recentes primeiro

    tableBody.innerHTML = '';
    recipesToShow.forEach(recipe => {
        const pet = pets.find(p => p.id === recipe.petId);
        const vet = users.find(u => u.id === recipe.vetId);
        const client = users.find(u => u.id === recipe.clientId);

        const petName = pet ? pet.name : `ID ${recipe.petId}`;
        const tutorName = client ? client.name : `ID ${recipe.clientId}`;
        const vetName = vet ? vet.name : `ID ${recipe.vetId}`;
        let displayDate = 'Inválida'; try{displayDate = new Date(recipe.dateIssued+'T00:00:00').toLocaleDateString('pt-BR',{timeZone:'UTC'});}catch(e){}

        const row = tableBody.insertRow();

        let rowHTML = `
            <td>${displayDate}</td>
            <td>${petName}</td>
        `;
        if(profile !== 'client'){ // Tutor visível para Vet/Admin
            rowHTML += `<td>${tutorName}</td>`;
        }
        if(profile === 'administrator'){ // Vet visível só para Admin
            rowHTML += `<td>${vetName}</td>`;
        }
         rowHTML += `
            <td>${recipe.medication}</td>
            <td>
                <button type="button" class="btn btn-sm btn-outline-primary view-recipe-details-btn" data-recipe-id="${recipe.id}" data-consultation-id="${recipe.consultationId}" title="Ver Detalhes">
                    <i class="bi bi-eye-fill"></i> Ver Detalhes
                </button>
            </td>
        `;
        row.innerHTML = rowHTML;
    });
}
// Handler para ações na tabela de Receitas (só tem 'Ver Detalhes' por enquanto)
function handleRecipesTableActions(event) {
     const detailsButton = event.target.closest('.view-recipe-details-btn');
     if (detailsButton) {
         const recipeId = detailsButton.dataset.recipeId;
         const consultationId = detailsButton.dataset.consultationId; // Pega ID da consulta tbm
         if (recipeId) {
             handleOpenViewRecipeModal(recipeId, consultationId); // Usa o mesmo modal de visualização
         }
     }
}


// --- Inicialização Principal ---
document.addEventListener("DOMContentLoaded", (e) => {
    console.log("DOM Ready. Init App v1.14...");
    initializeSampleData();
    const proceed = checkLoginAndSetupPage();

    setupDarkMode();
    setupFormValidationAndListeners();

    if (proceed) {
        const uid = getLoggedInUserId();
        const profile = getUserProfile();
        const page = window.location.pathname.split('/').pop() || 'index.html';

        if (uid) {
            const user = getUserById(uid);
            const profilePhotoPreview = document.getElementById('profilePhotoPreview');
            if (profilePhotoPreview) { profilePhotoPreview.src = user.photoUrl || getDefaultProfilePhoto(user.profile); profilePhotoPreview.onerror = () => { profilePhotoPreview.src = getDefaultProfilePhoto('default'); }; }

            if (page === 'dashboard.html' || page === '') { updateDashboardData(); }
            else if (page === 'pets.html') { renderPetsCards(); }
            else if (page === 'consultations.html') {
                if (profile === 'administrator') { console.log("Setup Consultations Admin..."); const afa=document.getElementById('availabilityForm'); populateAdminVetDropdown('availabilityVetId'); if(afa){afa.removeEventListener('submit', handleAdminAvailabilityFormSubmit); afa.addEventListener('submit', handleAdminAvailabilityFormSubmit);} renderAdminAvailabilitiesList('availabilitiesList'); const dia=document.getElementById('availabilityDateInput'); if(dia){dia.min=new Date().toISOString().split("T")[0];} renderAllBookedAppointments('bookedConsultationsTable');
                } else if (profile === 'veterinarian') { console.log("Setup Consultations Vet..."); renderVetConsultationsTable('vetBookedConsultationsTable', uid);
                } else if (profile === 'client') { console.log("Setup Consultations Client..."); const bf=document.getElementById('bookingForm'); const ps=document.getElementById('bookingPetId'); const vs=document.getElementById('bookingVetId'); const cc=document.getElementById('clientCalendar'); setTimeout(() => { if(!cc)return; const hp=populateClientPetDropdown('bookingPetId', uid); if(hp){ initializeFlatpickrCalendar('clientCalendar'); if(ps){ps.removeEventListener('change',checkBookingButtonState);ps.addEventListener('change',checkBookingButtonState);} if(vs){vs.removeEventListener('change',checkBookingButtonState);vs.addEventListener('change',checkBookingButtonState);} if(bf){bf.removeEventListener('submit',handleBookingFormSubmit);bf.addEventListener('submit',handleBookingFormSubmit);} } else { if(cc)cc.innerHTML='<p class="text-center text-muted mt-3">Cadastre pet.</p>'; if(bf)bf.style.display='none'; } renderClientBookedAppointments('clientBookedAppointmentsList', uid); }, 0); }
            } else if (page === 'manage_users.html') { if (profile === 'administrator') { console.log("Setup Manage Users..."); renderUsersTable('usersTableBody'); }
            } else if (page === 'profile.html') { console.log("Setup Profile..."); const pNE=document.getElementById('profileName'); const pEE=document.getElementById('profileEmail'); const pRE=document.getElementById('profileRole'); if(pNE)pNE.textContent=user.name; if(pEE)pEE.textContent=user.email; if(pRE)pRE.textContent=translateProfile(user.profile);
            } else if (page === 'recipes.html') { // NOVO v1.14
                 console.log("Setting up Recipes page (v1.14)...");
                 renderRecipesTable('recipesTableBody');
            }
        }
    } else { console.log("Redirected/Setup failed."); }
    console.log("App v1.14 Init OK.");
});
